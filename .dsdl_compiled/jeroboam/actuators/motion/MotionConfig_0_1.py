# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/thomas/git/CyphalDemo/jeroboam/actuators/motion/MotionConfig.0.1.uavcan
#
# Generated at:  2022-05-06 20:25:55.635418 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     jeroboam.actuators.motion.MotionConfig
# Version:       0.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import jeroboam.actuators.motion
import uavcan.si.unit.acceleration
import uavcan.si.unit.angular_acceleration
import uavcan.si.unit.angular_velocity
import uavcan.si.unit.velocity


def _restore_constant(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class MotionConfig_0_1:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 leftPID:         None | jeroboam.actuators.motion.AdaptativePIDConfig_0_1 = None,
                 rightPID:        None | jeroboam.actuators.motion.AdaptativePIDConfig_0_1 = None,
                 linear:          None | jeroboam.actuators.motion.PIDConfig_0_1 = None,
                 angular:         None | jeroboam.actuators.motion.PIDConfig_0_1 = None,
                 maxLinearSpeed:  None | uavcan.si.unit.velocity.Scalar_1_0 = None,
                 maxAngularSpeed: None | uavcan.si.unit.angular_velocity.Scalar_1_0 = None,
                 maxLinearAccl:   None | uavcan.si.unit.acceleration.Scalar_1_0 = None,
                 maxAngularAccl:  None | uavcan.si.unit.angular_acceleration.Scalar_1_0 = None) -> None:
        """
        jeroboam.actuators.motion.MotionConfig.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param leftPID:         jeroboam.actuators.motion.AdaptativePIDConfig.0.1 leftPID
        :param rightPID:        jeroboam.actuators.motion.AdaptativePIDConfig.0.1 rightPID
        :param linear:          jeroboam.actuators.motion.PIDConfig.0.1 linear
        :param angular:         jeroboam.actuators.motion.PIDConfig.0.1 angular
        :param maxLinearSpeed:  uavcan.si.unit.velocity.Scalar.1.0 maxLinearSpeed
        :param maxAngularSpeed: uavcan.si.unit.angular_velocity.Scalar.1.0 maxAngularSpeed
        :param maxLinearAccl:   uavcan.si.unit.acceleration.Scalar.1.0 maxLinearAccl
        :param maxAngularAccl:  uavcan.si.unit.angular_acceleration.Scalar.1.0 maxAngularAccl
        """
        self._leftPID:         jeroboam.actuators.motion.AdaptativePIDConfig_0_1
        self._rightPID:        jeroboam.actuators.motion.AdaptativePIDConfig_0_1
        self._linear:          jeroboam.actuators.motion.PIDConfig_0_1
        self._angular:         jeroboam.actuators.motion.PIDConfig_0_1
        self._maxLinearSpeed:  uavcan.si.unit.velocity.Scalar_1_0
        self._maxAngularSpeed: uavcan.si.unit.angular_velocity.Scalar_1_0
        self._maxLinearAccl:   uavcan.si.unit.acceleration.Scalar_1_0
        self._maxAngularAccl:  uavcan.si.unit.angular_acceleration.Scalar_1_0

        if leftPID is None:
            self.leftPID = jeroboam.actuators.motion.AdaptativePIDConfig_0_1()
        elif isinstance(leftPID, jeroboam.actuators.motion.AdaptativePIDConfig_0_1):
            self.leftPID = leftPID
        else:
            raise ValueError(f'leftPID: expected jeroboam.actuators.motion.AdaptativePIDConfig_0_1 '
                             f'got {type(leftPID).__name__}')

        if rightPID is None:
            self.rightPID = jeroboam.actuators.motion.AdaptativePIDConfig_0_1()
        elif isinstance(rightPID, jeroboam.actuators.motion.AdaptativePIDConfig_0_1):
            self.rightPID = rightPID
        else:
            raise ValueError(f'rightPID: expected jeroboam.actuators.motion.AdaptativePIDConfig_0_1 '
                             f'got {type(rightPID).__name__}')

        if linear is None:
            self.linear = jeroboam.actuators.motion.PIDConfig_0_1()
        elif isinstance(linear, jeroboam.actuators.motion.PIDConfig_0_1):
            self.linear = linear
        else:
            raise ValueError(f'linear: expected jeroboam.actuators.motion.PIDConfig_0_1 '
                             f'got {type(linear).__name__}')

        if angular is None:
            self.angular = jeroboam.actuators.motion.PIDConfig_0_1()
        elif isinstance(angular, jeroboam.actuators.motion.PIDConfig_0_1):
            self.angular = angular
        else:
            raise ValueError(f'angular: expected jeroboam.actuators.motion.PIDConfig_0_1 '
                             f'got {type(angular).__name__}')

        if maxLinearSpeed is None:
            self.maxLinearSpeed = uavcan.si.unit.velocity.Scalar_1_0()
        elif isinstance(maxLinearSpeed, uavcan.si.unit.velocity.Scalar_1_0):
            self.maxLinearSpeed = maxLinearSpeed
        else:
            raise ValueError(f'maxLinearSpeed: expected uavcan.si.unit.velocity.Scalar_1_0 '
                             f'got {type(maxLinearSpeed).__name__}')

        if maxAngularSpeed is None:
            self.maxAngularSpeed = uavcan.si.unit.angular_velocity.Scalar_1_0()
        elif isinstance(maxAngularSpeed, uavcan.si.unit.angular_velocity.Scalar_1_0):
            self.maxAngularSpeed = maxAngularSpeed
        else:
            raise ValueError(f'maxAngularSpeed: expected uavcan.si.unit.angular_velocity.Scalar_1_0 '
                             f'got {type(maxAngularSpeed).__name__}')

        if maxLinearAccl is None:
            self.maxLinearAccl = uavcan.si.unit.acceleration.Scalar_1_0()
        elif isinstance(maxLinearAccl, uavcan.si.unit.acceleration.Scalar_1_0):
            self.maxLinearAccl = maxLinearAccl
        else:
            raise ValueError(f'maxLinearAccl: expected uavcan.si.unit.acceleration.Scalar_1_0 '
                             f'got {type(maxLinearAccl).__name__}')

        if maxAngularAccl is None:
            self.maxAngularAccl = uavcan.si.unit.angular_acceleration.Scalar_1_0()
        elif isinstance(maxAngularAccl, uavcan.si.unit.angular_acceleration.Scalar_1_0):
            self.maxAngularAccl = maxAngularAccl
        else:
            raise ValueError(f'maxAngularAccl: expected uavcan.si.unit.angular_acceleration.Scalar_1_0 '
                             f'got {type(maxAngularAccl).__name__}')

    @property
    def leftPID(self) -> jeroboam.actuators.motion.AdaptativePIDConfig_0_1:
        """
        jeroboam.actuators.motion.AdaptativePIDConfig.0.1 leftPID
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._leftPID

    @leftPID.setter
    def leftPID(self, x: jeroboam.actuators.motion.AdaptativePIDConfig_0_1) -> None:
        if isinstance(x, jeroboam.actuators.motion.AdaptativePIDConfig_0_1):
            self._leftPID = x
        else:
            raise ValueError(f'leftPID: expected jeroboam.actuators.motion.AdaptativePIDConfig_0_1 got {type(x).__name__}')

    @property
    def rightPID(self) -> jeroboam.actuators.motion.AdaptativePIDConfig_0_1:
        """
        jeroboam.actuators.motion.AdaptativePIDConfig.0.1 rightPID
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._rightPID

    @rightPID.setter
    def rightPID(self, x: jeroboam.actuators.motion.AdaptativePIDConfig_0_1) -> None:
        if isinstance(x, jeroboam.actuators.motion.AdaptativePIDConfig_0_1):
            self._rightPID = x
        else:
            raise ValueError(f'rightPID: expected jeroboam.actuators.motion.AdaptativePIDConfig_0_1 got {type(x).__name__}')

    @property
    def linear(self) -> jeroboam.actuators.motion.PIDConfig_0_1:
        """
        jeroboam.actuators.motion.PIDConfig.0.1 linear
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._linear

    @linear.setter
    def linear(self, x: jeroboam.actuators.motion.PIDConfig_0_1) -> None:
        if isinstance(x, jeroboam.actuators.motion.PIDConfig_0_1):
            self._linear = x
        else:
            raise ValueError(f'linear: expected jeroboam.actuators.motion.PIDConfig_0_1 got {type(x).__name__}')

    @property
    def angular(self) -> jeroboam.actuators.motion.PIDConfig_0_1:
        """
        jeroboam.actuators.motion.PIDConfig.0.1 angular
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._angular

    @angular.setter
    def angular(self, x: jeroboam.actuators.motion.PIDConfig_0_1) -> None:
        if isinstance(x, jeroboam.actuators.motion.PIDConfig_0_1):
            self._angular = x
        else:
            raise ValueError(f'angular: expected jeroboam.actuators.motion.PIDConfig_0_1 got {type(x).__name__}')

    @property
    def maxLinearSpeed(self) -> uavcan.si.unit.velocity.Scalar_1_0:
        """
        uavcan.si.unit.velocity.Scalar.1.0 maxLinearSpeed
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._maxLinearSpeed

    @maxLinearSpeed.setter
    def maxLinearSpeed(self, x: uavcan.si.unit.velocity.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.velocity.Scalar_1_0):
            self._maxLinearSpeed = x
        else:
            raise ValueError(f'maxLinearSpeed: expected uavcan.si.unit.velocity.Scalar_1_0 got {type(x).__name__}')

    @property
    def maxAngularSpeed(self) -> uavcan.si.unit.angular_velocity.Scalar_1_0:
        """
        uavcan.si.unit.angular_velocity.Scalar.1.0 maxAngularSpeed
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._maxAngularSpeed

    @maxAngularSpeed.setter
    def maxAngularSpeed(self, x: uavcan.si.unit.angular_velocity.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.angular_velocity.Scalar_1_0):
            self._maxAngularSpeed = x
        else:
            raise ValueError(f'maxAngularSpeed: expected uavcan.si.unit.angular_velocity.Scalar_1_0 got {type(x).__name__}')

    @property
    def maxLinearAccl(self) -> uavcan.si.unit.acceleration.Scalar_1_0:
        """
        uavcan.si.unit.acceleration.Scalar.1.0 maxLinearAccl
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._maxLinearAccl

    @maxLinearAccl.setter
    def maxLinearAccl(self, x: uavcan.si.unit.acceleration.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.acceleration.Scalar_1_0):
            self._maxLinearAccl = x
        else:
            raise ValueError(f'maxLinearAccl: expected uavcan.si.unit.acceleration.Scalar_1_0 got {type(x).__name__}')

    @property
    def maxAngularAccl(self) -> uavcan.si.unit.angular_acceleration.Scalar_1_0:
        """
        uavcan.si.unit.angular_acceleration.Scalar.1.0 maxAngularAccl
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._maxAngularAccl

    @maxAngularAccl.setter
    def maxAngularAccl(self, x: uavcan.si.unit.angular_acceleration.Scalar_1_0) -> None:
        if isinstance(x, uavcan.si.unit.angular_acceleration.Scalar_1_0):
            self._maxAngularAccl = x
        else:
            raise ValueError(f'maxAngularAccl: expected uavcan.si.unit.angular_acceleration.Scalar_1_0 got {type(x).__name__}')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.leftPID._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.rightPID._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.linear._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.angular._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.maxLinearSpeed._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.maxAngularSpeed._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.maxLinearAccl._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.maxAngularAccl._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        assert 1344 <= (_ser_.current_bit_length - _base_offset_) <= 1344, \
            'Bad serialization of jeroboam.actuators.motion.MotionConfig.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> MotionConfig_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "leftPID"
        _des_.pad_to_alignment(8)
        _f0_ = jeroboam.actuators.motion.AdaptativePIDConfig_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "rightPID"
        _des_.pad_to_alignment(8)
        _f1_ = jeroboam.actuators.motion.AdaptativePIDConfig_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "linear"
        _des_.pad_to_alignment(8)
        _f2_ = jeroboam.actuators.motion.PIDConfig_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f3_ holds the value of "angular"
        _des_.pad_to_alignment(8)
        _f3_ = jeroboam.actuators.motion.PIDConfig_0_1._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f4_ holds the value of "maxLinearSpeed"
        _des_.pad_to_alignment(8)
        _f4_ = uavcan.si.unit.velocity.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f5_ holds the value of "maxAngularSpeed"
        _des_.pad_to_alignment(8)
        _f5_ = uavcan.si.unit.angular_velocity.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f6_ holds the value of "maxLinearAccl"
        _des_.pad_to_alignment(8)
        _f6_ = uavcan.si.unit.acceleration.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f7_ holds the value of "maxAngularAccl"
        _des_.pad_to_alignment(8)
        _f7_ = uavcan.si.unit.angular_acceleration.Scalar_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        self = MotionConfig_0_1(
            leftPID=_f0_,
            rightPID=_f1_,
            linear=_f2_,
            angular=_f3_,
            maxLinearSpeed=_f4_,
            maxAngularSpeed=_f5_,
            maxLinearAccl=_f6_,
            maxAngularAccl=_f7_)
        _des_.pad_to_alignment(8)
        assert 1344 <= (_des_.consumed_bit_length - _base_offset_) <= 1344, \
            'Bad deserialization of jeroboam.actuators.motion.MotionConfig.0.1'
        assert isinstance(self, MotionConfig_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'leftPID=%s' % self.leftPID,
            'rightPID=%s' % self.rightPID,
            'linear=%s' % self.linear,
            'angular=%s' % self.angular,
            'maxLinearSpeed=%s' % self.maxLinearSpeed,
            'maxAngularSpeed=%s' % self.maxAngularSpeed,
            'maxLinearAccl=%s' % self.maxLinearAccl,
            'maxAngularAccl=%s' % self.maxAngularAccl,
        ])
        return f'jeroboam.actuators.motion.MotionConfig.0.1({_o_0_})'

    _EXTENT_BYTES_ = 168

    _MODEL_: _pydsdl_.StructureType = _restore_constant(
        'ABzY8Q-pP50{`V#OK%)S5Z;ZSc{qu&0f~gL1Q84hgCA>Wqab19$S7=VOpGED2|7J9?X6yBXNH*`<3)<(C<4V&OCZu*Il-MPH~$0>'
        '2n45y8{#1@IfAI(nO$#YXPrdC<bWmjw7a^htG@cWs=d+s>FwcM<3~Q>*X_`D3=*<{Q-{A#O@|r8@@l>pa>0}wS`k5Hi6~%i)P1II'
        's%NjMt7=U45tr6bexk|(&-7@`pty?)F9?mAC%ESti;d5`=dSXKl7nQ81tBgd$jO0=$^51&=gRpH)iove6DmZ&%}B6Ny@f|~ajvyX'
        '$-V{79DCcTeZ;1M5}`eXJ@F#+$>+QKIA>E|P{G&O^0~8#t1tk2n_j^I^aKtkrbgtEE<ObTtt&aYz}K05p1BnPb9(7c%!UYaSdF=&'
        '!^5Y#dw5TN!LelaWH;3OfY-Q=Q^~yxjz`6vuI(o#7sP3JuF3^O(xRatHP1#rPs&G@o9bH4m`B;77U}eTpe|tKBox%OX<)Y-x`B3T'
        'wBm9R+4|ts0K>zeLZrh&GDjQonW^IVWNC7$I5RU<nw~6`rcak9CQgkPCrVSrQgM1>=Je!ru{f^uS&=FCqIW*ExTvdgkL)F;gBDLT'
        '1K)N4F%ap$l|1k=7jceO@XrJS*+V>E$wD_HVZCO04!4vXS!6X2Vb#vR=CeR&Ya7UZVgW}^!YlHj3(RMNXYboX-a+5tJnlQR6gdtJ'
        '>gi2rYmGV)Qy;0Za^d69#K?O|jk~IRMNjCuo($+DMGn<g%Xz&u_i=eJ{ziyDTlcBkxNA$1scj(LdVFpxG+}!fPYw}nW0H}~Cdvhv'
        'gc&$>14?k_ep7^p^qQQ83a$W+OeRO#ZZ|ROarMyW5EugvW`q>9nIABV3TCTKd62B?%S3!H5Cq*_lEWnQqQGJ(a2W9^5=;*0kHbwQ'
        '*D_YD^<}+!6Y<TzfB}N1OH{wWFS;UoDjd_lZ@%sWb<ScIk%rBShXz_#4^`sJhrDiGKV#gOFe18UQCA5~`4Iv%L^lF`q4Bb<af_)<'
        '9WTtnd;>*TfO83)jYKa~+vaYigAFKc-}f+{s9|t3Ii}gKDTe3jGTEkiy)}Ck%dH<DrpkFt$D8FVa0!1eUsX+Vgzz>p0#;&AFE&ZW'
        'LcMzfcW-3u{-it@?I3UP>m}rMCIU;z?DYomH?*O}jXYe^L$;|tIbb!=ZxSi1<o#Qey+^;(fThsQX9TfNK)^!q9J_TPpsFo?4v)cC'
        '@I?g9Ce)U|g?GmwfDi;kum<nJI@IN{j2@LHBV65qc-J#Xwi$1e-3as<W;&lvP)va@8w^>zrPpt@ttZsz5Hu6%uvLKpbS82XrGo*l'
        'K(_ceiu)bzG8$wH2dG=Y0+=D)Zm`E<u#Au!5w;^^jX9p~AI6GB8>+gu=F7QeZ{3Z8c(}#{3kY6kEEh;?J8_t5F2FDFbC^j3d~-x5'
        'b{-Ni9VS-C?N^R2RS6B`o{(e7)6rpBYsRPKp*TY1%ebLi+x_q*P4(9GFCg6u=?ovlj&#0}rxl+ud#7}qNTnmmAbAjJ84jq;soNzl'
        ')uDVYSMA3kJ3H_z{06_nAM$WI1_gia8q|jn>bdy5yJCGjjkRUrGc;)Qmj4pxBWe0~L;R#h{OP+RexN;)-9&q+MeI4ta(2S{xh}kZ'
        'P?#U>;C46A%Nq2vcL#kmE2P~7|KK*&+t5$?=hrX{-@-TWJ$wg0!VmBl{8T-PLBQYDGdiHh^>A4aFXFIcn|-wX-_>33um9(rTV0<D'
        'uob^8wt8?KhmN;JhhQUCnC-=N96A&_1c}0yUf;@4=n&jao;!N|R)#`aP#s04#X7k@6yeaJlNMB`S~>+SDrD%S1=R~JomnlK&Cp2;'
        '^p!IH0UZX-^Z*h700'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
