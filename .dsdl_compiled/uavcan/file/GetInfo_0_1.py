# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/thomas/git/CyphalDemo/public_regulated_data_types/uavcan/file/405.GetInfo.0.1.dsdl
#
# Generated at:  2022-05-06 20:25:54.591408 UTC
# Is deprecated: yes
# Fixed port ID: 405
# Full name:     uavcan.file.GetInfo
# Version:       0.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import warnings as _warnings_
import uavcan.file


def _restore_constant(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class GetInfo_0_1:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     path: None | uavcan.file.Path_1_0 = None) -> None:
            """
            uavcan.file.GetInfo.Request.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param path: uavcan.file.Path.1.0 path
            """
            _warnings_.warn('Data type uavcan.file.GetInfo.Request.0.1 is deprecated', DeprecationWarning)

            self._path: uavcan.file.Path_1_0

            if path is None:
                self.path = uavcan.file.Path_1_0()
            elif isinstance(path, uavcan.file.Path_1_0):
                self.path = path
            else:
                raise ValueError(f'path: expected uavcan.file.Path_1_0 '
                                 f'got {type(path).__name__}')

        @property
        def path(self) -> uavcan.file.Path_1_0:
            """
            uavcan.file.Path.1.0 path
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._path

        @path.setter
        def path(self, x: uavcan.file.Path_1_0) -> None:
            if isinstance(x, uavcan.file.Path_1_0):
                self._path = x
            else:
                raise ValueError(f'path: expected uavcan.file.Path_1_0 got {type(x).__name__}')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.path._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 904, \
                'Bad serialization of uavcan.file.GetInfo.Request.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> GetInfo_0_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "path"
            _des_.pad_to_alignment(8)
            _f0_ = uavcan.file.Path_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            self = GetInfo_0_1.Request(
                path=_f0_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 904, \
                'Bad deserialization of uavcan.file.GetInfo.Request.0.1'
            assert isinstance(self, GetInfo_0_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'path=%s' % self.path,
            ])
            return f'uavcan.file.GetInfo.Request.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 405
        _EXTENT_BYTES_ = 300

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant(
            'ABzY8QiOG40{@Lx|8EpU6u(+%uUEcWC?>=(@`GNJcA*3#8WSlkMLh0kN+J9pF0;GuZYJ#QuCudk&x8bGz^bF5jQ(I^VvLFZrtj_U'
            'UGHeC-Y>WNX6EzW`@A=ww@(iJ(weU1KXWeW1!)jEZVF2BP=3X|5FFQ!yGfi%4b~i8flzkwG1%xOU|-p}r}nX}n+aD&5hyDv=I9-*'
            'GGAv3Mz<VxBi==bvl-v?dE~SuV&4FLGit}qI((Tys;#NIo1jt|M+7x_uY7)G8<ob`bNkeqX_srQq?c((?E`yI%!5tV9A1?W2D^dO'
            '+<<HDYKl%w7DiDsCx+u%<62m8L>z03H7ev+oP2=0PM5piGG`BPs}%29bLJjLD_U+r)X`#ztfOokbs>Z<M7oIMpfnOiY|BmDF>^Oc'
            'Wha8*W~8A5Y7}qU^`v&g+?{PyF-f1N+U>>xCi$M3UF!qUF=rXqnzTg3KC|oAoN`mmqkyYm7-%Q+%oHLe+?Tp%8;N<dTyon)YDwZ;'
            'Ny~hrDi*|r#u!10OLY2>>xHQ`@AlK%1;<SF>+jYaxh8c%+8ul?(=+34oLIvS0!e#aFAk-TBsHNMBY7IT=5_*#>sSqUsV^k9g1Bl<'
            'FUOJ3HAMSvrKD-6g2+<cubShnEDX8o?b$iuZt^e#`@+^6)t9L!u9ak5$5Ut4dDMY*NI=VjLVDzO`8HCE2b#H2to5;S{<<>4BGChG'
            'Yd#q_lT_6#<hZplMq4W{Q>-^^Cp^k;ODppL1Nj`Q@u0agF1{GrC^)VXGIso-gt{D&gBYo+STxR<DiTAjFd!eh{j~xw=A}h|sXN!#'
            'me!XxZez7Uw8ffvyI&%VMnOv9j5Kj|J?EQ;eRMoC)mGdmEA~lswS2~P^Ty>5EOk;IuK2HDYR#ql?yc*s8ylaN(TJpUAu=<*xOiy*'
            '24-eRMO?2}NE3ku;+*ITDISYnhL<V;OoRF)ush}$HvKjPZW1f)%D}eFNjHr%<%3J2;TCjG(qAY&Y@#((&Fx%DUSX-nE+E$;CJmg>'
            '_|Gxl@s7l%uPyfy!NV2oUDU@U^RSm)1syChdft^QJTOtH6e5vJ6l8*T7M+U@@oqKU<r!D-6r)ijFQ_M*(g*vkfcx)^S1K)(SqK=x'
            'IkhE5C@k%vt;;BI29b}#5HK0ByBn)l9JV2V#ZlN}*yl1}DIhTQFq0|MxYmx<7Rm-oL!JtD{=#{JO=Z*};M`V6;~Z1aMm1+T&QGa0'
            ')+~@nE<*KKoor$3=iR~LHro=?7vv&<wnWimUN1jK>42JZYU_aHU{4je7&WA<4o=5m=N$*#VfHK{ALV%zxBMM%AT}dWQ0F0*A?pYP'
            'Mn_%VW4@sKO1bBmWi-Xm7hZ`?<dRyH)d>V}W?|WbxsPg$EwH76x+IpkDe6#;ykHh-;w+TWBeE4-qsy=e1u&#7i3j;EtIolIyKEt9'
            'Zs`N>u9WEeBiE>us3NkPmBlVZl;tCx$o55?Ld1BA2esk>EX3_L^FVI_n&~?LIrn6U!=S(q0Fq(%{n4Ki-!&p}D^{sqz+nW07^PUO'
            '(rwXN1K)T-vB-EI=gZ>rFpRfS`Wu|Y2;)d|84)SG-(@lvEFWsvH+fn`tyzrz(HU1*Qo2K!UKTw{i&CJ^h<b4=X3I-0wz|SlhPseC'
            'R(vQvE`;Ng5ivi$#)AMo?h$cZUB(ZWq*%u3n~jR^Ud<(a$~-Q<#>GFyY$~4Zi03WwjrguEz86OPAbu1t#7ps$_}QGgeDVFkchW_?'
            '>Vu0ee%%pZR%k(Wi<`r}IMc|CLMhQOa=WpC>7tQoez#=v475LYP}08-o_-U5{99gP8b6j!&_|M({a<N`zXlnIzj36&HqK&gn-8bV'
            'EUIqtk*Qn(*o11&X9h#zzfuVQzH#3uOrO#09v-S}bU@!NpYAv3$Mzk+;`0_}`*12Bq1E9Lnh#i7e6r6X9d-Tz=&TniSqlIF'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     error:                               None | uavcan.file.Error_1_0 = None,
                     size:                                None | int | _np_.uint64 = None,
                     unix_timestamp_of_last_modification: None | int | _np_.uint64 = None,
                     is_file_not_directory:               None | bool = None,
                     is_link:                             None | bool = None,
                     is_readable:                         None | bool = None,
                     is_writeable:                        None | bool = None) -> None:
            """
            uavcan.file.GetInfo.Response.0.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param error:                               uavcan.file.Error.1.0 error
            :param size:                                truncated uint40 size
            :param unix_timestamp_of_last_modification: truncated uint40 unix_timestamp_of_last_modification
            :param is_file_not_directory:               saturated bool is_file_not_directory
            :param is_link:                             saturated bool is_link
            :param is_readable:                         saturated bool is_readable
            :param is_writeable:                        saturated bool is_writeable
            """
            _warnings_.warn('Data type uavcan.file.GetInfo.Response.0.1 is deprecated', DeprecationWarning)

            self._error:                               uavcan.file.Error_1_0
            self._size:                                int
            self._unix_timestamp_of_last_modification: int
            self._is_file_not_directory:               bool
            self._is_link:                             bool
            self._is_readable:                         bool
            self._is_writeable:                        bool

            if error is None:
                self.error = uavcan.file.Error_1_0()
            elif isinstance(error, uavcan.file.Error_1_0):
                self.error = error
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 '
                                 f'got {type(error).__name__}')

            self.size = size if size is not None else 0  # type: ignore

            self.unix_timestamp_of_last_modification = unix_timestamp_of_last_modification if unix_timestamp_of_last_modification is not None else 0  # type: ignore

            self.is_file_not_directory = is_file_not_directory if is_file_not_directory is not None else False

            self.is_link = is_link if is_link is not None else False

            self.is_readable = is_readable if is_readable is not None else False

            self.is_writeable = is_writeable if is_writeable is not None else False

        @property
        def error(self) -> uavcan.file.Error_1_0:
            """
            uavcan.file.Error.1.0 error
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._error

        @error.setter
        def error(self, x: uavcan.file.Error_1_0) -> None:
            if isinstance(x, uavcan.file.Error_1_0):
                self._error = x
            else:
                raise ValueError(f'error: expected uavcan.file.Error_1_0 got {type(x).__name__}')

        @property
        def size(self) -> int:
            """
            truncated uint40 size
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._size

        @size.setter
        def size(self, x: int | _np_.uint64) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 1099511627775:
                self._size = x
            else:
                raise ValueError(f'size: value {x} is not in [0, 1099511627775]')

        @property
        def unix_timestamp_of_last_modification(self) -> int:
            """
            truncated uint40 unix_timestamp_of_last_modification
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._unix_timestamp_of_last_modification

        @unix_timestamp_of_last_modification.setter
        def unix_timestamp_of_last_modification(self, x: int | _np_.uint64) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 1099511627775:
                self._unix_timestamp_of_last_modification = x
            else:
                raise ValueError(f'unix_timestamp_of_last_modification: value {x} is not in [0, 1099511627775]')

        @property
        def is_file_not_directory(self) -> bool:
            """
            saturated bool is_file_not_directory
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._is_file_not_directory

        @is_file_not_directory.setter
        def is_file_not_directory(self, x: bool) -> None:
            self._is_file_not_directory = bool(x)  # Cast to bool implements saturation

        @property
        def is_link(self) -> bool:
            """
            saturated bool is_link
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._is_link

        @is_link.setter
        def is_link(self, x: bool) -> None:
            self._is_link = bool(x)  # Cast to bool implements saturation

        @property
        def is_readable(self) -> bool:
            """
            saturated bool is_readable
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._is_readable

        @is_readable.setter
        def is_readable(self, x: bool) -> None:
            self._is_readable = bool(x)  # Cast to bool implements saturation

        @property
        def is_writeable(self) -> bool:
            """
            saturated bool is_writeable
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._is_writeable

        @is_writeable.setter
        def is_writeable(self, x: bool) -> None:
            self._is_writeable = bool(x)  # Cast to bool implements saturation

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.pad_to_alignment(8)
            self.error._serialize_(_ser_)
            assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.add_aligned_unsigned(self.size, 40)
            _ser_.add_aligned_unsigned(self.unix_timestamp_of_last_modification, 40)
            _ser_.add_unaligned_bit(self.is_file_not_directory)
            _ser_.add_unaligned_bit(self.is_link)
            _ser_.add_unaligned_bit(self.is_readable)
            _ser_.add_unaligned_bit(self.is_writeable)
            _ser_.skip_bits(4)
            _ser_.pad_to_alignment(8)
            assert 104 <= (_ser_.current_bit_length - _base_offset_) <= 104, \
                'Bad serialization of uavcan.file.GetInfo.Response.0.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> GetInfo_0_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f1_ holds the value of "error"
            _des_.pad_to_alignment(8)
            _f1_ = uavcan.file.Error_1_0._deserialize_(_des_)
            assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
            # Temporary _f2_ holds the value of "size"
            _f2_ = _des_.fetch_aligned_unsigned(40)
            # Temporary _f3_ holds the value of "unix_timestamp_of_last_modification"
            _f3_ = _des_.fetch_aligned_unsigned(40)
            # Temporary _f4_ holds the value of "is_file_not_directory"
            _f4_ = _des_.fetch_unaligned_bit()
            # Temporary _f5_ holds the value of "is_link"
            _f5_ = _des_.fetch_unaligned_bit()
            # Temporary _f6_ holds the value of "is_readable"
            _f6_ = _des_.fetch_unaligned_bit()
            # Temporary _f7_ holds the value of "is_writeable"
            _f7_ = _des_.fetch_unaligned_bit()
            # Temporary _f8_ holds the value of ""
            _des_.skip_bits(4)
            self = GetInfo_0_1.Response(
                error=_f1_,
                size=_f2_,
                unix_timestamp_of_last_modification=_f3_,
                is_file_not_directory=_f4_,
                is_link=_f5_,
                is_readable=_f6_,
                is_writeable=_f7_)
            _des_.pad_to_alignment(8)
            assert 104 <= (_des_.consumed_bit_length - _base_offset_) <= 104, \
                'Bad deserialization of uavcan.file.GetInfo.Response.0.1'
            assert isinstance(self, GetInfo_0_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'error=%s' % self.error,
                'size=%s' % self.size,
                'unix_timestamp_of_last_modification=%s' % self.unix_timestamp_of_last_modification,
                'is_file_not_directory=%s' % self.is_file_not_directory,
                'is_link=%s' % self.is_link,
                'is_readable=%s' % self.is_readable,
                'is_writeable=%s' % self.is_writeable,
            ])
            return f'uavcan.file.GetInfo.Response.0.1({_o_0_})'

        _FIXED_PORT_ID_ = 405
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant(
            'ABzY8QiOG40{`t-UuYc18P_F}b(UmD#(!%1hl~lNGIdw7T}LK;2#$0z$Juwv>E!eeWiq=vci-51JIl_jtTPnihZLI*#Nf?CpZX7)'
            'Hfi%v3Wb)Gl7~DrDYW#ZB@d-gD1In?D0%2Zq2KK4POH-?&C%BiNjp39{rSx|-}n1wU!HvJ(fmaAW1ft9zVZWyDjo|Kh&#*;xI;bJ'
            'jieHqr{>5i4@4J-eybPp^kI7TZu<3f!5pF@40)WwggLUI<HXZR%=d~+(U5h~#HSOs<+0Fd3$%Te>uT7RPLr!hh6<O<bc@GI$k5uF'
            'zOgfYnARq0rEjEnQ!`7M*0FFC%~kp}G<*Q+fmCXy)&vjyT_`iuXPQxM@xgRH2{Yzc5m_aUCGKYqj@C-G3F{e-p*J|WBYyfIzfo)h'
            'B(~7+@y$?)PRRXgsCkFSdjm2{U7=~f!;XfuHjk)0rZnwJA5on#r`G$1teUfeYuD|P4aF;IGc_lu(k%2@>=zB)OI+N_)D{a8L@-Hx'
            '>7`~O#o6Pgyn-=C9X$X6r{Src(bKhg_$+)5&gB*!Yt&M3U=fdY$JS^1`{mnF%#}TtJ-aP8nZ`L5^sU3PIoyt!XJ-|zukDO+-ISJ6'
            'y9wo@v-AHA%aP4`t=@RCPAko3qnW{iWq5YS2|Q<}p1E}C;-xVx9<Dc9bgi*jUmansbYToj<!a+VSfz0w9l5fyQrXy`tCf1SG78pX'
            '=P!<7Zmx=^s?EwutI_;2S~Jg89qybXSQfk+VF8nvGk@`RjKxf3NEnHj2BLv!5=jwiMYP0OU&P$gGVY~AXfB)|XLHs1jVsrxs}%ol'
            'RxF(5iqk<jw$_Lx1|k#*r6!nc!Y6GRBNR?Fi#uHBQmUsA`aT%r9M;jb>a_}OH5&BVmFCsTs32ch9w*3+%@%E}(T(*hE2FJl9w$gP'
            'DK|FP*Bi~&=nS~HYmS@a1tO$wFQ->)_Ve&0JOdZtDy+Z@a2>u1F9HV!5^ljA*n(H!F1!lggm1xX39^vSv79}IDUsecM`>GZbDu^s'
            ')>Qau-5jGzCb7q<Jp^i#BsJ6a5ePRmhu5()Y_HqdhsbHAMdTcimgf&?d@`*2$2&r&W@e=q0Si`nSElAuQQ`)|qcQI!f%Uvg$f$5A'
            '=V7#DU8d$}#>LKgXUVYylxoX<$0;y{aAF>6%fMU0<LP}&ti?K4HodJeX9gQf5@;gZn97ALA~ND}Mpup{NjE^ZPxtw4mrc>I9)3^F'
            '-19<T%icHmfJ)8dR7R;G2N_Ylt}AiRi2ORn0K0|t-pF8JqbYP!4+J(V_@#Mbo%y~9JNty-*LJm@1ObbC!>h3TYPwLHf1q6KrBQAn'
            't(6lO_t_Pp?KC)G+jcN*yA7TIs@2L?ZQ_B#K7<6%!mRJs6F19U>?k~Mh>khE8&g}Ng-D{{$q`AufJuI~R<fB3=k90LCY89ut+8j<'
            'vO~c)B0}Q!Fqa*&0Wt}E;^G1pKhn@09?Ogq`fMan?4#WMvG3@qBoy0Ji!LSw>qb<zX|U5}MO%0oaEoKDg<ILISHDCmk@S!UQG?tD'
            '9%g&Q9E*G8HdDkZlU$km4*7}&CfXzkZ-w&qa0t$r+2^GUI1Bf5e#BVH>psVLQmDMRkpF0bZyj@{6(`)<x64SDEKu3&KxoL}Uq?Hb'
            'MhAfiZ&{Nsv;dhFe;Kh;8Oftx;BmgoFJ>ENuH53J9k31_i*Mt^RZhsbk^af&<oxj<%pwHaaO@pv5N}~C5i8xEv|YsW&kTDk2oTQ#'
            'i=sgAtP$A&Am-37roh>c=X(x)XML{k+zdOntD1-7`=6<{iApeE@(l4M&$}4k7D{8Y4T3C)il{+KdzcR~_ZRVEDDmm!SF^dDTHkw9'
            '#arelN8d8HB$Bf!-@r#Pw{Yu|3iphi1G@)y3HY`(^Lsc2e}X^2pWy@e8~g?S4v*lU@DKPGe3-y@@4@%#@O}8f0=y1Cgdf2h@Fx5i'
            'egbcq6JJ=mG`OQLAp;Ni7k+v#>rX#}pXZK$0dEh;>7Bvo?E+z)#M`G$q;MqjnZr5pA)nh@{YP87d8{-sk-gkJfusM+=c8Z2Z)zn>'
            'r}yw)@jm|j7SH8(Na65qp))LCXW+^TT}GkHyFz{4q3O}OFQL#&`*nw=i@K$OE<+)<Uw3GFw62Rn?ta~&>Cw6#3VHi=ho(pC`Y7b@'
            '*BzQJ>P`-H0fnHbTTb>*=WP~d@r!dl|I$2#1^WRO>mw}G58>bcTPfe1!n`RIF1CKYjkT!L>o1qgDZB*c-}NyCBw~EzAIH00mE>L3'
            '-c(1`{D=%K27_QQ_K?9Rnk?+_CXcul2VI12<=2!YR4CdiKgeSBULD>?>^6XdyGs_yEa-OeJ0ljYs`DSP@1pVa5C8x'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.file.GetInfo.0.1()'


    _FIXED_PORT_ID_ = 405
    _MODEL_: _pydsdl_.ServiceType = _restore_constant(
        'ABzY8QiOG40{`t<-ESLN6_1;?`DoJ*y8WP~;%-4JM@pwnKepAb0C^LqYn<4@aY|WKO|NIJeXlc~na<ov;-W<@(xP-3X$zgg!#=QD'
        'X@!vZ1K{7_0qr9X@W2yDJn?|UIdjMM*qOA=1LB31dhOhMzR$V8bFTOC!59Dd>R9|=_;t5y`lhAnKJx^%#3S0Un5G*}$8~%mSri^w'
        'W8S7PSiS4A=y^2zB>FJQhcmjz9tO;py2O1x7S1d(OLTz69Hu<13)^O1OtL1uz>tAABJ7ZE(+;S*5YSD7+FDb94R@F<*-b~QDLqj*'
        'sc$mR7mkghChjKRpGW1fa_*<m6R=dLQhK5hNajcPqrH6V6Gh>nCBZCnV92y?Qb`k+j;c+5JUo%MYn4hK@ss>iIaeM-z5L95pgNyW'
        'Ukoqoq1N+gHww?*rLYS-%gk;`UclYa&@zj4n4N@nFE?Bdqb)Xp;?%nBi<ZsIk}X+_dBgIK=nWxtD^?ekC&5XBLf$%#2~N(1XI6WH'
        'kWE{FvlTqTz<w0fqVNsfm((_?XQl=11dVVCB)QZOvKy7%@GHrY-o&6LLDZ74%$FzmHGZR<Ly`Ozav#(imLG+0_1qf>2T$eb-%)t<'
        'Jt0-l*5J>?y>MK2+$bb_3Gus~hGPi>g0#Xq4g^m^)l^;PQR#T;DmA!(QsBk#^nzm>R5Cl06rDy&kJ%CCy%-*^1eQg;?k>v1`X;pk'
        '7JU-s%ahOi2EUU8<Ga9hwnpt1t1*{Jv6o33dWUX9Xn~;?Z}Rn?tT=uhVMCJe3y`fm9uFrltARy<w46iIv1dNyn{B()j&DmPXfQB@'
        'LN*#JJLB9)5%MOSqGYJ}gDzG%NH!e^-B<*h=fX({43<Ja_)zU534S|HEeM!eE3Ou5g?bgT-R2v7J-paU5m@6fAI%vm;>lVZZ))|V'
        '1J6{`qXzCmolGtz-{CwwaN|~ll@y!Xd6hBKD}{Uda<Ou!{(fQ&4-yspQ8+$7f2}W!g{M*|qBpt<noy|V-{c;*`A_(d1GrQs12?cv'
        '%xEV(21UQkOx<-nsS7izgeP_12|R=82pYNy=LCLOq5(y;3h25WL&<YUb?yqpnmdSrhb4Sc@OQi=py;O;x-O^IBGfM6qZ>4!mH~QO'
        'kYvz2fGc1)tWXLhp~@(nLGjwWc2&c;M-uPyDV<Xvtnm<Dd<E>$Q{KM!=J?oH1z?t$1jT971%gtD--W#nLBk2N4FCp{2%D_emu_pM'
        '&KYrRt4pBHg-Lt{g0Y5)@QH-8rsHh^Y!Kg~J|~y1TtczFuv;iN-pj-0Eb&+q(40so=JFgz5>r5MK~$IIanEv$xH^c_BwJh<995XC'
        'DFF0HqZ{*~JItHarfUp>12v`Og4N6?d8V~Aa!J!b9e7V{)RFK5xW#|N4TNIE5ag)^X$V>z1cRau?Gl6IeMR46&jRdXpbM_VCd3j;'
        'l;lwegPsLxH)r3OCgd_HsL;8N03y4EK2jA~2ooiius3i|#Tryv$`l4BZ3$qcgQ#kI3milXq{cfv!Gn`TdbZ?gOeLU*=mbf!6^N3!'
        'rDL!S?)c0m)CWfCQIlPEnoZJRa*M$>&I=IphOnR+DETI1Zd!e>_4^p_X$<0)<N5M3G$V!*Z6A`As8yxa*9{jGk_`88E=fMMEN9Ed'
        'k3J_@=-8498-qf7RVHG<GT1cKP3)G+HE}>cD5D;v6z>qY7uXxVN(Jb&u@<)+vQVgyr9}cT)M36B@o)2j0*=KYFh9OZO%pWk0&zHf'
        '9|jj!9YgmGhQW6?<{~}?4a#@m@HhN|&p+PbKdbPNf0F0V_|N$-_;Vn7!GFnr6~1xf>dpR~bQP|8|Dy9xcX&Ho!~?IRZVqiYfrQ9-'
        '040(Q-EJsgylA*JH%QqWVbYl0%jwVi-+s-%c$r`P1Pn{3aY*79Udt{1+r9_<chJ(<HuPc{tvr|t&j9MGA=A@2gCg{HjTr=h|62<9'
        'GwohhTUG4c>847C8}tXsxBDw|xy<&<X$8D}Fcr7Z$#e^i8!R3^&Nz%a_c1_l-v!8EiTM+Ww&~Q+`L*m}Sn)-@n5G8L6z|D2Z_)Fh'
        'B40AGrlNNu-8K)Y@kLc+W|tizKTs`abl2R~mpAGm5i{$Ra;5tHie9YM`jbOi+M%~^-n@Qu9}=f3)w;e^U9T)=*>-Iok|s;lJ<ZDP'
        '$E2CU!a{LvO<yclO2sU*4$NQQhq$995LK!b7hu-<0Z0qKQ_`3=M_`I!9T&Tq2RG%)mIt?nAPy)Xl$=V{Mf{N-5{+1MZGJz_l`3}&'
        '%cVsf*7YKqbE^oQcTV9A&Qb{I*y7a8(8PuXST7NZWg3-snX#W_9a}0b7xj9zsxKF6cZyj-zIJOrL9VXX_3Dzowpv)omUeqTLBgV3'
        'TVGwR*6P_6aD5<-A!g?JU-+N--}qnoKl$JJzxlt~6S=Xm_Bbvlahbv80xoB9c?*|IxXj~n8JBl)xrIv+mjWyS|M=;i-Q`#e9K!=7'
        '{}hJB@XFAn2$&RD5+^e{)K#3g8RD4#$`+D_*AocDy^eB%H{f3;iXuQU1#Ru{+`tH|rj%+R%mTW+Y7<XY=k>)S#JTXDrPzM>3kSV;'
        '<j}~P8k`z9VM@F!kC^Agh1<I_0%wEQQS^<#7TdZMFic3=adoGuTgh8oG=&;*(T*h?f7UCdd!*<(Fz+A-j6O^apQ>GN!6=5zL@_f{'
        'BOjn)qDf$sv7N0^=jXyB?>Uaes6F)i0N9vQ#i?vOEqwK6flI2VK%pJJS@!~l^3|Zwq?RB5*(VxS*tVd;vUN;=4xCU?>i6n6VhcYt'
        'v{GBmXR)L2#y-RJ0t0>1qAkdbiJ@ZZje#}TOS=M**S6vaSb^Axzo+!0F0gc=cVfQru=lz!VAuqc^3-)L!TjFP9#6CBLYRGR^+!Q{'
        'jLJRz;i!H*h1qBSCQO%_#19Ofl#1yvg}H27_;N0un=zDr?@<7{3@8kbnO8*1cHmP}PyVCHU_1Of8NV2w&;C(r(}BltIC&R7(nSWY'
        'AM|k++)%@W!nF1eAvXNWHbpqPk4p;|0~ZGuflGkPLtK7@%N8zAaQRRH*lW#^8?Qp3>;durltYy58Yb+Ea&8!#V@Mvt@H}9+`km=E'
        '5ZxXS^>|0Nvw0r?(SzN*Bim`-T%VT$5#7x@vYpM_0HVfj-jVHWUIU1X-Mk~)*}NtYnY(#Mw$r=^`@9^8c$!!B&*AOlLH4J?<Katn'
        '?~ML!d)U8Yc)i*m!SX-2tiNA*oa2A^FTU!^S6}j|1KoQ+>ORZuIgXslc(G+Z)F!b7CjbAW_q-aM{t+J=UjLz&2F$YuAe5(ZIgiV^'
        '1HGWGyvV&YtWWVR9W=E60Ij^+<NFx^00'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
