# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/thomas/git/CyphalDemo/public_regulated_data_types/uavcan/si/unit/duration/WideScalar.1.0.dsdl
#
# Generated at:  2022-05-06 20:25:54.540246 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.si.unit.duration.WideScalar
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_


def _restore_constant(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class WideScalar_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 second: None | int | float | _np_.float64 = None) -> None:
        """
        uavcan.si.unit.duration.WideScalar.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param second: saturated float64 second
        """
        self._second: float

        self.second = second if second is not None else 0.0  # type: ignore

    @property
    def second(self) -> float:
        """
        saturated float64 second
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._second

    @second.setter
    def second(self, x: int | float | _np_.float64) -> None:
        """Raises ValueError if the value is finite and outside of the permitted range, regardless of the cast mode."""
        self._second = float(x)  # Range check not required

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        # Saturation not required due to compatible native representation of "saturated float64"
        _ser_.add_aligned_f64(self.second)
        _ser_.pad_to_alignment(8)
        assert 64 <= (_ser_.current_bit_length - _base_offset_) <= 64, \
            'Bad serialization of uavcan.si.unit.duration.WideScalar.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> WideScalar_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "second"
        _f0_ = _des_.fetch_aligned_f64()
        self = WideScalar_1_0(
            second=_f0_)
        _des_.pad_to_alignment(8)
        assert 64 <= (_des_.consumed_bit_length - _base_offset_) <= 64, \
            'Bad deserialization of uavcan.si.unit.duration.WideScalar.1.0'
        assert isinstance(self, WideScalar_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'second=%s' % self.second,
        ])
        return f'uavcan.si.unit.duration.WideScalar.1.0({_o_0_})'

    _EXTENT_BYTES_ = 8

    _MODEL_: _pydsdl_.StructureType = _restore_constant(
        'ABzY8QiOG40{?YXOK%)S5MGnm4mJ-(j<|3DaRBEs^!ss(2r`FFjD-<!L9L#dj;E#BnbAy-<wc4_4j>}61d^NoOSK<t2=Yp+epJ<0'
        'UscyPzuy0Qe|vHDi=PbZdaB#POm6hH^}pD%b%m+=)zD8qxD?+%4dYyed34{e2bV6><5%frI*i+<vn#NFHrw;ccE#k2x$~i@=g|h='
        'cg2sscBhqX?U>>NbMD3oZd0>}yFc9QFVk{sx%fT3N^#%V5Jq3l!A<GsbQiCGol@LB@~*8neD+LjgEb+OyeoVd{mKV_4j%6wwY?4h'
        'EotABKA6^ZXQ4^UCjeR5DVSAXyVN|2AD!HW=dj`_*q&z-l(G0NeV5`RGX>k#cC6n7`U7xQ_6&M6*E#Wv(N?)Z6SU>%W)B!Y@vX%I'
        'OD%<_m@*{@#atqV87GnvDk+wTQ7)ubNFrD{;fgV>1=mVr$)r#y#}I*}LWn3%l@y38&AAekNFkI|SYpl)%eRzcMipTK;29;D5}}la'
        'BUa$77^HwdqMS;Og;oMVHjKCwoMWO0l7cYKG(s9tr73}6h9o3Y94Q7)lxo1v*(jj`ya*whDJ-}`igQgNE1^&=lnA9OA_!ubF$u*3'
        'Sqf|=R!Cz_v{niej(|HN0xO0IQ-CW}%FUn4W;^aouIjrw#rvl2s}vV-ZR5ckvt`Ql_1wNp%@@tX3EsSR!{{m-T%BIW56laH;c7GV'
        'V=%r>$MK<=`gyDz7+Plr3ojaX^V0efUh@QGa&eMxFJXeVzJ%OOpLMYlV72hb_s)DsaqsDRXl(nnTlFb^Jj`Y5D>J&Yxy_k3vkL(`'
        '*NRH<oyh}SRuzoOt*%l$*eI*O1uF8Sr;rEmz%+IOj-%^B9{qD)x%9d@Y#u{L$`-IczZJ%2K*2G*eNOScuY7oRbv}jTjYQ%-(+??r'
        'dKbvFUX?u*227qqp&+}=_}jq&^?uw4ZO2rN2k|!F#1BtwUHk6re@@M_Y(1V^D0BU`6%fvCJG=B}I$S>aYbxOjGh73u<%79|a#y~~'
        '8itL%$eZ1)W9W8{-ZSoEu-(;1=y)!taxRO10Kq~IL>2`A00'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
