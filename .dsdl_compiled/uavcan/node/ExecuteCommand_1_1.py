# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/thomas/git/CyphalDemo/public_regulated_data_types/uavcan/node/435.ExecuteCommand.1.1.dsdl
#
# Generated at:  2022-05-06 20:25:54.027962 UTC
# Is deprecated: no
# Fixed port ID: 435
# Full name:     uavcan.node.ExecuteCommand
# Version:       1.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_


def _restore_constant(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class ExecuteCommand_1_1:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        COMMAND_RESTART:                 int = 65535
        COMMAND_POWER_OFF:               int = 65534
        COMMAND_BEGIN_SOFTWARE_UPDATE:   int = 65533
        COMMAND_FACTORY_RESET:           int = 65532
        COMMAND_EMERGENCY_STOP:          int = 65531
        COMMAND_STORE_PERSISTENT_STATES: int = 65530

        def __init__(self,
                     command:   None | int | _np_.uint16 = None,
                     parameter: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
            """
            uavcan.node.ExecuteCommand.Request.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param command:   saturated uint16 command
            :param parameter: saturated uint8[<=255] parameter
            """
            self._command:   int
            self._parameter: _NDArray_[_np_.uint8]

            self.command = command if command is not None else 0  # type: ignore

            if parameter is None:
                self.parameter = _np_.array([], _np_.uint8)
            else:
                parameter = parameter.encode() if isinstance(parameter, str) else parameter  # Implicit string encoding
                if isinstance(parameter, (bytes, bytearray)) and len(parameter) <= 255:
                    # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                    # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                    self._parameter = _np_.frombuffer(parameter, _np_.uint8)  # type: ignore
                elif isinstance(parameter, _np_.ndarray) and parameter.dtype == _np_.uint8 and parameter.ndim == 1 and parameter.size <= 255:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._parameter = parameter
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    parameter = _np_.array(parameter, _np_.uint8).flatten()
                    if not parameter.size <= 255:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'parameter: invalid array length: not {parameter.size} <= 255')
                    self._parameter = parameter
                assert isinstance(self._parameter, _np_.ndarray)
                assert self._parameter.dtype == _np_.uint8  # type: ignore
                assert self._parameter.ndim == 1
                assert len(self._parameter) <= 255

        @property
        def command(self) -> int:
            """
            saturated uint16 command
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._command

        @command.setter
        def command(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._command = x
            else:
                raise ValueError(f'command: value {x} is not in [0, 65535]')

        @property
        def parameter(self) -> _NDArray_[_np_.uint8]:
            """
            saturated uint8[<=255] parameter
            DSDL does not support strings natively yet. To interpret this array as a string,
            use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
            .parameter.tobytes().decode()
            When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._parameter

        @parameter.setter
        def parameter(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
            x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
            if isinstance(x, (bytes, bytearray)) and len(x) <= 255:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._parameter = _np_.frombuffer(x, _np_.uint8)  # type: ignore
            elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 255:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._parameter = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.uint8).flatten()
                if not x.size <= 255:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'parameter: invalid array length: not {x.size} <= 255')
                self._parameter = x
            assert isinstance(self._parameter, _np_.ndarray)
            assert self._parameter.dtype == _np_.uint8  # type: ignore
            assert self._parameter.ndim == 1
            assert len(self._parameter) <= 255

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u16(max(min(self.command, 65535), 0))
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.parameter) <= 255, 'self.parameter: saturated uint8[<=255]'
            _ser_.add_aligned_u8(len(self.parameter))
            _ser_.add_aligned_array_of_standard_bit_length_primitives(self.parameter)
            _ser_.pad_to_alignment(8)
            assert 24 <= (_ser_.current_bit_length - _base_offset_) <= 2064, \
                'Bad serialization of uavcan.node.ExecuteCommand.Request.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> ExecuteCommand_1_1.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "command"
            _f0_ = _des_.fetch_aligned_u16()
            # Temporary _f1_ holds the value of "parameter"
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 255:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 255')
            _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
            assert len(_f1_) <= 255, 'saturated uint8[<=255]'
            self = ExecuteCommand_1_1.Request(
                command=_f0_,
                parameter=_f1_)
            _des_.pad_to_alignment(8)
            assert 24 <= (_des_.consumed_bit_length - _base_offset_) <= 2064, \
                'Bad deserialization of uavcan.node.ExecuteCommand.Request.1.1'
            assert isinstance(self, ExecuteCommand_1_1.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'command=%s' % self.command,
                'parameter=%s' % repr(bytes(self.parameter))[1:],
            ])
            return f'uavcan.node.ExecuteCommand.Request.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 435
        _EXTENT_BYTES_ = 300

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant(
            'ABzY8QiOG40{@j+TaO$^8Qmq0y>2JO!Ndu&LJ9-Pth76jI8G3jK<nLEXSLajX4f$xi8?jiHB*JVyC&V$yE~RZ$wN>gwS+~QrwH+u'
            '2i_t;;(ihE#2b(N5qN|1Rdx5w?2bvCDB7Oxx_p;&&i7U2?NdLwereABQ#>^sg;^N2{Y<2aN9qpmMWXEoIv(mw8BrDwuZc*-cntSP'
            'Ls5QEF1}NKzibt!eU&64E#+MC@SaKYz~rfz9`c}{@EA*6&iO&WlXjv*(e50HAU9%F$1zXBc2~TWi_Db8f`1^=OzDJHJo8HR{6V=n'
            'zd8TI@}06c=W}CH)x+ehd;`nh!}exWSv<I|L==t<^8An+?i;f5Uekvud8-aE;=;`&Q-ef=8;KDEkxqMe&hIJXM<N**S#F-k;sMW$'
            'AH&H~exbOyTQ5Y@+N=1sMW5i&+`DDBEI#jN1`*(CIJwY!c~5%9nZSjoEKd2M4$9)+d(~JrOvQ32`U+;TYE;H}Di}A+NWqLAGTpb2'
            'DNhE1wd&D55$VIlw)cuiLY-y|DPis#=EH=Pr=ulyV81SBLlLOH3dVb=#4g&?#^{(0d1{XB19wuRk^$?d7;s0Vy4h^Ta+%~&#1d^-'
            'o(ZNxkr)g>+8OWZ1HrC5_u>mLwo8QLF&A+8L~-dJ8BbF_DvQTo;dqNTFWXSA(A(*hJ?x7}#MsF}Kwhd={^I6>d`f;<eg)Al&LWRP'
            '9w;*^H~(9Fu1bvGCn(LF_odBwN~oKC%I`&4Sv*}^I!-N&HphRL#Y5MXarW-vXJu*efUk#T!S1z4Hi~;XQozN9EfH(P!GJ6~Ly>Z$'
            '(@Bm7Qh@;S+r?w6ItjQD$;_eTG>uF}Le#?eN4E1Q0w7L|JnbLwC>Q0A%GTz>-K-~9s$i^P*5h4*LRSohQTH<Gwjc8&gccKCwlC#Q'
            'y_St%tP)U!9x!a{KWB<F#Hl>uG=FoR#?IZ{TyTGL&`ul;d1BRKJMRft^cvFg`qtcnd}G!O$uW%f0?*C@#*ipOI`(w&&lQ$IJAmNk'
            'HOunhFj8QT(H83!e%ovxKl(b2K|A~gJ1`pDG&a6WW%bAg`fZP<)SMp^A=C{EjKn+(G}eOfXs}wD#U&<=0x`7IGIrMpM8>agdW<cz'
            ')t#-amF+eEdgsQ*w!gQtzJF__+wpJiuC45Mh(8yK1tgy~ZU6={O@R1(1Ac_$k$SyuXK#O{yHA06yDNHHJAJVt?rm#B=EC_*$FsbO'
            '`H1P%{vq#D$h;zv!jshrk`tYVh%g0~-xf^t`yw#cm}n2$ORUcW;ATX_fp}n~c(P^#@{PBY@F}%k=-SZpsCE)_&h}HRgSVjM!g}?L'
            '@5O^JT)lebYDv7cP>`P#mPhNb?C#v^bp4(6bqdUP_hfF6!Na79%{A7~Q~XF74+5CU4ppUdJ;6{^GX;fWIn*w)bB6j5W07~%Ppi^A'
            'xXs`i%$ILfe#ir7@bmX!@RR=^7xL-v{M4J9yDkQmu4lS$4ylghLljBam1=8#o)PY<3f@=H+pgdi|6`0J&9_BnAzYP&%MF7rSAe$F'
            '$8liHu0SV-t0Z%g;6~OoOT^*WA{BGg7uuUXBa9UANb``wHFDOA6zzknJeH>5Y+^iTyqV-3jZ}e{;n7aduHs;Asi>`d5udX|K6F;5'
            'I)bZ}n{FEt0B>wX+w*P?F((z4wRp0l$KhI<G`Z#CEfyV61gR^<|4<5xB4r314RCA#s+@WE$XT0h^qm)&846T9=u=!Tu{5b;Zc~Ib'
            '72gB<1ie5ObW&&16KSd`QK86K-APoC0Sn=0My>=?e%f)i0I-&$^YxWAA9AwaVXEIy#j0eUqUe}t<mqHN%+1KEDTnTcXbGIGrg;-a'
            'WzZjBvjeOSgKSKp{m>DZl_weR!#`Rf({KX)2O@zs=NP6jjYlbxKEfQ#J>(-7l`0o#PIL~;q7zA->eVx8=~}^Tq-wAdj+VSUiD=a1'
            'Qm)H_7cn(j6}GU0s|v8%;##>$8F*0vy-HtgXHO84$G~6mkc3020*M`{fvQG>WUg4b<b-VR=IUx^Z_ipzbW=$#>|PoU9>a}iaU)2l'
            'Q%Vuj7J`@-+H7XjeFjk;)~rfh_b%#{rlV-Fg^~ziLq;bI@hm#HafUd5(L`o_Y*t4a#8%0HzWu2QjGcx8YlhKiLSE^!N71d;C!F-r'
            '+KgCh7zv78D*9CwlB6s_P7R`CJ?gtl1RWa~^?vqMYzuSZsy~ebPEZC2n|TJQ0_?n7(q(Z%SYd_BqKi*B6LP3_b|E@Ou$J?H<nuDU'
            'xJ=BOJWRbL0K^`=Ui9F=*3MezxX`!R?x%8d=BhKjg>xGgY=D9uB<c>~je->G4DG-OaEPm_C;5R@tcJz3xk`a7tQFOn%xDOdmUfs`'
            'io8}uE8A+=QBZ<rkVI)Ec^*<|VHT9mHTe`_p4HTHEJ@rVQVrxXKj13jJr$wVukEJPZK(hl1XUpQ5gkaZceK?Q?y$Jxj`OIm(%4#K'
            '8y?|CWONo2_PpDuBMq)JubJdo!Lph{mWsG1LR;I=b6K{dO7O@4AOl%Z67Hs&2U57RUsE37@1cmIMU;TV*-d^gd4~-gXRS`j%##EG'
            'beOc@1D&9L7<iz#dy5=UA)XDD3co$!&4M8r7HK4iXVoe4*yeU`aX^yaC*^U`T~0+rRGH9xkNj<_Mx)<twhpX{BTm_0s;kT~-R~pe'
            'v{(`zHv$e(i$=euAh_f;vTTDg)3<RAbrEY<1mRJpPq0Lh7RJ*MBi5TH`kYQ2fup8tv8huCCmpJQIA$5qf5@jwPZK+|THFd)E6Y(X'
            'sti#2mN(YwPNwQc>d-WJp6I=(KU)N@y?emOorw&kDyTXnDt08iuJLB*mKc<h>UFbkfF`SH9O|=@6Pj5q@Rj>$fgh_|;PsW&{hjWs'
            'bfoFn1I=H%t}4}mc*gb-eKp9de$RH{l~~qC5p*>?k4&AcjJ1gD^~t8{3LqeBxu~b+Ngz_{aG@}DLpN~*%Ieurs)0yEssg8#*ivLo'
            '7ZL&A83|u7ae$f`o#*Z&Iv4BcbhbL(8=dXdSJ9#E>{57sylP9vWTO?MiKL1hp;IDlB|oU!BHc3ed8RUr7_eR)g2pYhI|^DA!26Sj'
            'p>bU5-W2h1>WKwsdHd{rc>7fCEqnxXcRSs^jlKQO_P%RN_vk>h`kA@8sbdXJCiZ4?%$Q2nQ>Uf1kWXW0e7vzYC9Y|7vOT10O%xE!'
            'v2n}1`n-eg_dtWML^Rp}tZTDv+jZN^y>Vj)%ZQREmSQ|Nno4wl!N`*CLAaYs16z{-A#d^^LQNJuDhp`ZgjtDj?amC#Vi6M)rgkDh'
            'Nd)ODPa(rE!A>a2k}b4eVm+YLN0w3cf&;8@Cv_CwB{tp1+7T1iFLhO+!zIpWH$H(Sp6waM)NyO-szD@Ko=)`P)>Tp-N^00tpeEm;'
            '7FqI)8Fv+9=e;HcfvB=V17<??>kU*zabe;j+wYCsB{@O%tMZ~0vL$1w<PYQ>`M!Ktmh!Irnfy@xTz-@n=loDm2TrnHzF&OS@2evb'
            '`c!p%6_(q@qkg7y$b?UV?UP`a#Toh&sa{!}-PM^o+NHN2l&xa^Yh`gtYPz96jpiceSy?<VP^K)r)zMJ$Xbssei%Y}2hkE3vVvyT{'
            'GQLE|gww7Yz)BP@jDG&g)#G>k&*ERYx+x9adtdM+&tMxd$FEwz@;#`|#~V|0t142>x=IO{J&Zz)DCkqY74*m^iOwj;F38*73PJnC'
            'B^5DC4;>b-G1V40sZtv-$N@kg%n=UYqgz1N41qE3-Ws?@roSPtxlDg+>K^owT^`aQ>BRjfzK+MOyQv#=<2ru(kLGFedi4C=tXC``'
            'Y<Aspb3Uhg&hzqh{PzY1(WR!m?ruMykgso@Ul_ms*XBY#<Gs5BmFMI`^1OVMjJOE!DFE+XfbK*2k&qvM8d%C-yf1&bEq^6{-IBkN'
            'zm>m}zn6cIf0Tccf0lotl*_*%z4GtH8DAWcV3k{Mo-Hl{%kF<HrM?u@Kb*K+XAtlgoq*4b^JM%cW5uSgrT43+TU$%>GcTRxYukv-'
            'n`bF9^)+#3LuBJgAK#wwk*2o)2N$2Z=S>>`00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        STATUS_SUCCESS:        int = 0
        STATUS_FAILURE:        int = 1
        STATUS_NOT_AUTHORIZED: int = 2
        STATUS_BAD_COMMAND:    int = 3
        STATUS_BAD_PARAMETER:  int = 4
        STATUS_BAD_STATE:      int = 5
        STATUS_INTERNAL_ERROR: int = 6

        def __init__(self,
                     status: None | int | _np_.uint8 = None) -> None:
            """
            uavcan.node.ExecuteCommand.Response.1.1
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param status: saturated uint8 status
            """
            self._status: int

            self.status = status if status is not None else 0  # type: ignore

        @property
        def status(self) -> int:
            """
            saturated uint8 status
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._status

        @status.setter
        def status(self, x: int | _np_.uint8) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 255:
                self._status = x
            else:
                raise ValueError(f'status: value {x} is not in [0, 255]')

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u8(max(min(self.status, 255), 0))
            _ser_.pad_to_alignment(8)
            assert 8 <= (_ser_.current_bit_length - _base_offset_) <= 8, \
                'Bad serialization of uavcan.node.ExecuteCommand.Response.1.1'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> ExecuteCommand_1_1.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f2_ holds the value of "status"
            _f2_ = _des_.fetch_aligned_u8()
            self = ExecuteCommand_1_1.Response(
                status=_f2_)
            _des_.pad_to_alignment(8)
            assert 8 <= (_des_.consumed_bit_length - _base_offset_) <= 8, \
                'Bad deserialization of uavcan.node.ExecuteCommand.Response.1.1'
            assert isinstance(self, ExecuteCommand_1_1.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'status=%s' % self.status,
            ])
            return f'uavcan.node.ExecuteCommand.Response.1.1({_o_0_})'

        _FIXED_PORT_ID_ = 435
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant(
            'ABzY8QiOG40{@*>|8EpU6z>Hn*A@^g;1{B-K?(4~Su7Y6P4u{4u{nBe?yme`LMF4julFYG?XEMkZO;S)CLrjjXh#!`3I0M%)c800'
            'X7}1&51LT#ez@74nKz&Jd7t^byL<5GKPSfWk2#z6Lls69ra%fFi7&VxL4^fLFHMxtV9n7vh(wQuVW*#h-Lx0)**o@v8D}DnL0TL$'
            'N84IvfzBlCUUG=VyhkC<Wqd8*aV1VdsMI$g$TZZFUXRCNr3ETYVnwUUYz?FmN$f%%zBw3g+D55SdSLHaGsU>pQuwr6*;^EU5AfTo'
            'tT{9<APRR7O|p<{&a{KM*Y;Gpbj2F2m|lsM=*AE(#2UIFcc(YSe4$wcaaW^llqq<?m1aH4(&B68^zv39x2;m6xkWcc8I9eyEo)9P'
            'rHKMA!{I;=Gao0-I8EtHS#ywuNnp+E9RyE;$|CJ0tDerEKF>huilq(Hrd%TyDV*NMhp*z9!RXCK8PDQ5e7gvKtlg=0R@$t+QmfV5'
            'ZHwoP*VbH8jlD#AP*f=NR2BrF)M^$*eM<#j<55Peys^a_Y@`Iqm1!4i<rdfUjz?QiaK=omN*=hklu~(qFs6A^nz4=y<rA`tFA99V'
            'x^QEqRd>KYtR-0#dU2vX<x+47ICer%Lb`l1O=1Qw*k0y4>Ue+<5-^+{AjA($>GD3HoEkuBE_GOSrSs`hYvHr{oI`YO4q`zkhZ%S}'
            '@gg4Fb|vGP#zd0H^2|q0es3QqzdShkT6K=qmKGPQ&HUKe&W<MN^q{z3o=|zxx8r0zcHHDdWoeqYYLCL0-3N@5Lok-Bt?FXEQ*SvS'
            'A3GrKh{&;!a!DSbL3-o>1Nt*X6YD}_UMU3;1VfNVL0#DgsN+MR+%T8Obq6TOq=YyZiH5B!<P6CR6DT-JL6U?A@~0vdtBAlofL;9`'
            'a#?5+OU>#HR&TYIa=PXnx`fWoh2bg8g^GL)iu(s4QA2L#@z~2^x^e|st6W56xLy+EnLPvU{cUhyriYA^`TfF`9msd^G*<8ueu5ui'
            '1Fz#vY$3;67$M?1s*Efy1iIq^cVc;Dj<Hp-0U>khVIs6mbAqWPlL62~1T5ubVCJy<iG**>#4<IJjb-<ClMJ);F8LWIt|g4qW$1A-'
            'g9BZmt(mO#Q{>Sc^b%{%q?sRyfJx|Pkvn<Ev}wb5(M%|ks~)YsGJAEjsa&S7vnZ>b&rUPsim<u*JFj080oaE`{g|^?Kcb-Lw=8YP'
            'h-sxBeYWPvHKA|h&u!SYT62IUsWskSK~%rzCzKIES)>dH9<Y?xJdwjKH9$e_3V$;%E%PuGarc=;_{7aN$&$J3kIv%E5B5T%{8;(a'
            'P17O*b*9XxJbNN`O^OD5!wn9*Mn(KO{FBbgd7L-gX6EOTp2R6Ug2(X$by||iC6dT>lE*EQh64QZMdX8bAK|?weueih-~;>`AL1kY'
            '2ERpv-{JSJH25Qx0e>Pau%W3scJXe>oF>f`|2QN=;356w{d(wXd33ejYLuM9iwm}izZ3-gioXx>bc&jy({B7+!p%g%H|fItoxrC<'
            '9D2mzu28SEc-(~+q@cxK)w^AAJ3||uj?{xN{?)|4DL?$@4$<%4k3ClSFVPKZF!{%GCf(M`e_gskzp@Dc00'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.node.ExecuteCommand.1.1()'


    _FIXED_PORT_ID_ = 435
    _MODEL_: _pydsdl_.ServiceType = _restore_constant(
        'ABzY8QiOG40{_KY+ix6K8MkQ?JCmkKnkKCh3P%ZQZE7!V(zGg}0>@q_mg@_<o0e8ole05teI}WmS>|GUix8<$p{+(x(dh#ZNPXa~'
        '4+tS4K%!g<NbrRC2Y7`40N&vDopWY(cD+s$Bm{`bdiGqt%kTSrm*w_>_dYx~q5hM7y4QDO*RR>Jh&=9lukp4oYPJ)0dtvM)BF~OA'
        'MYQcXqSfz-{M~%^_52(8Om@_c#Me?0Cw4;b<wSOLN%&qDTioH5hioqhM5LB9lPGnPG#WYVpdIiot~!_UZHEW7Aaq5ozAKzG5sP8B'
        '%LBL8(AVYJw7o5&*b4(Xaq30$`Q3bVa&_|C`Rfqa=1CHHZETM7S8@D4I+m;Q?BKE|e0Ly_WxG7#TDASQ_af5P+s2BM*Mr#G3WU27'
        'Bw|ZM!`dCO+g@V(BG^h~zIq&oI~;cFLdjfyDm%Sd97Nk{i}-GhzJf**Z{&?Ud&rIxSb#@v^`JM?wmg<iIodpVcEEN+C(r)bG;3Ke'
        '67#O;co2)3RWaj{U_4=o6f6mQEbOR{5f8Qmn<-Yeg&*$B)~pvr;D%Am;1Z_4!+wYm@u)w?w$-=uaZfm2$8!dEc!4^!9VSWGWj!7x'
        'Blkd^DDi?V)`_s-H4%m7Wn+$uCHH+6gb7Py!8}(42^PTZjJLyW!7g5S_L*mEIm~fJ8(cn`o!!UdQN;Us_V9}wZ}H{@Wy%G5JBn`M'
        'i!N?5=w{~R^Q+VHGjc}G!ur`^__4<wFX`v2|IQvXj<GugrLp@STb(3_>fHzIwjbx&V}+yx*FxxI^zS^o|B9Drd7JptNSfVehrK*w'
        '`yCSZyY0~TfQyrBq8q{v34&##CnBDNQ8h*#=^+5*Qg&)F3>=<_VC+&-npQ?4pwPnlW9zB!0}y*w9<sN&pNjl@`ONC{J8@es8)K|s'
        '*TW5hLPPXK;_WBWExXHiVOnhXvU(|7#aYUJT`xe0&<8AA``1)9MKP87oc6Cy(%Ol4R;Ts9DZ)<d_IRM!Vm)mONOS{k;cFAqvOR8x'
        '>|hz)g*ZD57=xk`;;|>Pzb>#C+yMlauUVY-dcKF~NkWBngWno!;g3!jbrE*>8_|K)h|NUVmw9oqvV?xkqAf+t4+6mr%P2@B_9>vT'
        '84yp1sP>ZCIVN@;(Nm$7s9SvmGXDC!#n?Ps+*n&%SYNWQ)UU3r+s%#T)=LYGx_y0fX`xl8_<1CohV$v-5?~0X3W$%F;D<?$73VeT'
        '&DKJrMTWWE5bZG3{Gv$QS`QNv7s|(BcbryT-e+N?{vqust9V3G_@sD(=p>9>SeOjUZwV$k9pNOGnW$~m=2(Y2z)hc)1M$E}_Gl3e'
        '@HgI)!-v><x}i+Z{X$9XIoyeG4&EXpr<cuVe4ibB=F+8$mvV|*1%>X%ndL-bmd%Zq>J58id6^9JN>io@Jh&5-wz<qYX@ox_#vKP@'
        'vK`OxTw5?C-`E2~u@r3Qt3ADN2W#PX<WI%Y+_}Y|8pM~|Mi2RQE%4L#An>Di#)W+1D?hX*Ca#Dr!|QR_Np>iYq&*}_$Q6Z3{4^%q'
        'nGD|Xz_$&-75)bphnsJSSV7pNgmYyCoil(|*+<8~AiA6|NVpfo+7djGMVJL*XCRT+<;X8|H+>B=lEM9uyJW7umLA0n&QqC3g(+e-'
        'NGvUUQjNP<mpx-N+Gwj&G^|x9hKjx@p5q<f(^5vE4^@qt`WhktYam6<vaa{AClV@Z@ky;7m}{;o@{G2(nAJcL#I9uj9VrxwyoA6}'
        '0!JCZ_{`eJXEnCc(OO`qE0FQPPu=2(xhjw8OJUMT+(h&VdI2wlLE%YDL{UhNaz)IFO2R+}Q3yR_QpFk4Q>{}8fX(P|zOt}ngHBp?'
        '=5@+YQ7oB8NIHq%x58lFO_RQ2Qx4vBQ4(lcjndMLUV{1nmu=&82&8NZ?gx)RtTc#u2l~+oaR?<)f4~wbb4D<YZQPIG^gi}r?+)*4'
        's~BIPI0;i=7L`b(S+CehM;8pHELDJ&a5QJ7flsTdN9igHT6C$<GT6cmIx9eGg=<f5iV+tE=*E48oNYl!9sqyNf)jS6=SbW@1(aEh'
        'Ak)c8JI7_s>x+x^W>ZN{;pPRYP<Mq;a0EA&!i^xFj>ttUR1m~AS9vq0>eKO4w}>j!EQsQyVJj+ZAti#?;L(a8mO=+lv>;kv6p?WU'
        'mlc*qV0*!Kc<ZhM7&r9<&UF2Lg<k1vi>zzTC!BOp+Vt5>&lhC5NOVjVlEf@dN(G{hdgOQQ2x=P`)qd(#S0&~^XMb7;oFEMlHq#hX'
        '1=v|HN$tf7u|f*%MQtB<EaZ^w)Ironuo<lZ(dRjOagHLd+Du&&0Ad?j&stDmZDXlEO7u0hc~@$VJ$0<MP;Nzm4NwTT0`E1#8yTq^'
        '#wZ8+fJ4`0J;}EfW0g@%mwOSAg|qy^lQAs;)6xy&Qjs-d!b+7IY89BETqKcNiJp68T8IUv(?vd6n8!tE=_m>GA=2BD^L(3oK5u(I'
        'O8r7^a^0He0D}k>P`ytLiPDa)8o(VAo7mABb-bvnq)`Qr&?{o<#f0j2OLnBihV#lzmLe?0DI}@rwuP&58)_~U?Z^_`PXLfDX+jd}'
        'Mj>~k(7j)o9-!}z@cmh&fI!Plde2!qB^<|{PR>k&00z{URNzB6f&H*>+vEBzd_akKJX8#R+rk<LLlVpn;UFHHE^_2@b+_0i%I^^K'
        'XzR{L!lzKFaK1(QmRY0Z?;2YMR>dwS@6Q!kW`y@Ua5x<nxT8WqAu7@6uOSG|StTtiqm0#UkVCb_Y9>IqABTIQ#3L^34nvHhJ}Irw'
        'spD{TXzCK1Dh0QykOAT#$|(GMd?@vlwnM4K6@ksfDbj`U0J(2|WvQrSOf^!Nro?ll_M-Z17Pz+dfsyWs5^|MeDkMsFM7+B2W~i1J'
        'n3D2!d9Q;at1KLfUP%+pxDxo{J(R$wiV}EvVX?K*c$r$7x@u@XYUr#~7~*kNM|8Zc)YN;b3O8g~v?8c#c<LvGvtl+w!CrJWrYZn|'
        'ETy8@ng))DsKN!q6a`(S1&WK^V5%(<h{$s^SK>+$msN-le8)t5PNjhwYn==CV4c&2b?R&N#?|`z;>)PeHa5vT-(OTIqgrTnQAAS4'
        '_E9Mjw~`)IZ4qxJML%OiqX<|wP0*l()~%po0leSa3=Qm3)TXeHW=|YAPTQyMLEBFk+CoP}?q<EwTxquI>n&ZDHmM<6{KUk>P+Nn}'
        'L`^ma5o2gQ(p*{)`7m|{?Twn0=%P{6c8|uINFdmw>=s)^zk}*`J4C!vpwR`0x*A(oRks@M4GKF*Mj^T9D8|zyq!jI7F}xJELEPog'
        'K;<Mr$f`CXRAkXdPXU@PVTvMjxidzxuIN%E4BbS85(wf~9)X6hK~6BqoJzD-pfn)Y`zoT;fCEvXJ9Q-9IW}C!suh*-OOaKmxkQh4'
        '^<$#MQZ=I(YPW_)4I+rss8WY3Rf&1XscxBpN`Jedh=a$IK~*tO-YQ+-2;&u6Fczv$mQWSh$;u$xZuj+&oFMyIc~;((^D>fw{FeNt'
        '{H}ak{y@Gbe<a_RKb9Y)*%8|nRDlz%=Wk^X*d1?IxHe@S+jH~v?1UYMDQLnb!nTR9^K6R#@x6AQ9o`IMZ+Da4zMIcvlb_4812Uuu'
        '{UH<=T^{GzeOq3VXVzlBC%L}_Z|B+BUfM=JvLmsTs)RBaqGQ7$T@BzQG8a}qeeu%hjQ=V8mqs^vLUZqvw&XEnqsXyM37EeL*7?cG'
        'P`H_lR79O&0;ZZ#un`%3sI~$hDJM~nGBO~qSqlX1JwqyrtgxrCc$s-MfligmfUOh&1j2N{0emzC)Wr}YM$fH*Yk2y3`6cb?#i2Rq'
        'u}$t$leB04iEjt%R`u3(nz#<${-yj>9giM=CvIocFq=9zU!6>8&UsvN{I88gG}M$=_4M-*$=8lg4_^OmbvhmMUe7?~ad|?XlBY?C'
        'vjATJ;Jppdy)Qoy@@IDgOZoG+<S*9cFXgXh<cIRt@;CCg@^|th`Fr^X`A2fO{1e<O|C~+PVwVUjU%PQQI}I%BAC@9p3aTIW4A&V5'
        '{0o}E$J)7SzpAa+@L2j~^XaQ=bCY9-&ho}OEOX;9S*92h$I3*?p7iDIF<+{A^#gV>1u^1JncFORzxi}5JAcO?!1VTf;D$3}lG$`M'
        'nH?g=Ph(2eXIgp?LxoB4bBrzy)o&-=k2~rCN`Kdzw&~94NY>OzoT-9Z=U>VTMDeP19wE5NC-0nx$KJQRu=2w72F)R}%ZrM@De!du'
        'S6w%#SHx5rQN`#`)8>@RRIN?jk2@;LQ}-asDI?1IM$2Bf-nzEYSb3$sL=v4}5&?~7TwTej)I|)Ff+i#LYs=`(7w+Na2hGhi6*F}S'
        'U3;-LG*YRQL8SDpfX2*WqzzRN(x@00??H@*Dq?IdG#1wCt$Kq5`J(!zqWI;bGOpEKlF7z{0az@2Jv=Oawj2@a>3b0Bctt2xnvp<P'
        'Ta{`{SDfKUl2&Hv(U>h6?YRe~z^GuC{tLLQtiwv{3oqF9Mq@*nYni00%!+kEqJ|$TY=r8Q(nL)n1F_rF#-eVNYLU=Un(YzpnL*8<'
        'i1_A_$%%=ZQ}j4NkE8VXBt0IX$K&)kPmc@qsL|tjdOSyuYxG#6N0S~Kc-$p%XA}FRx$%ig{U%ssoN45z(S&pJAnq>7PU~~D)Z%<8'
        '`*WqlB<%my1UFwLk^jDSds6=6f0&<EpS(kQ!rl9)r}rnvrzgPn%>KD&Y|5FY|NDU<q1>om{Sp4=B-!FvHXW6Tt5{@w^c}M98}xXa'
        '9&eU*Ui<0f9WDJ9RS9Xk_8-hHXu`=N000'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
