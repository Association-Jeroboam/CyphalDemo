# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/CyphalDemo/public_regulated_data_types/uavcan/metatransport/udp/Endpoint.0.1.dsdl
#
# Generated at:  2022-05-06 20:35:07.200577 UTC
# Is deprecated: yes
# Fixed port ID: None
# Full name:     uavcan.metatransport.udp.Endpoint
# Version:       0.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import warnings as _warnings_


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Endpoint_0_1:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 ip_address:  None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray  = None,
                 mac_address: None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray  = None,
                 port:        None | int | _np_.uint16 = None) -> None:
        """
        uavcan.metatransport.udp.Endpoint.0.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param ip_address:  saturated uint8[16] ip_address
        :param mac_address: saturated uint8[6] mac_address
        :param port:        saturated uint16 port
        """
        _warnings_.warn('Data type uavcan.metatransport.udp.Endpoint.0.1 is deprecated', DeprecationWarning)

        self._ip_address:  _NDArray_[_np_.uint8]
        self._mac_address: _NDArray_[_np_.uint8]
        self._port:        int

        if ip_address is None:
            self.ip_address = _np_.zeros(16, _np_.uint8)
        else:
            if isinstance(ip_address, (bytes, bytearray)) and len(ip_address) == 16:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._ip_address = _np_.frombuffer(ip_address, _np_.uint8)  # type: ignore
            elif isinstance(ip_address, _np_.ndarray) and ip_address.dtype == _np_.uint8 and ip_address.ndim == 1 and ip_address.size == 16:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._ip_address = ip_address
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                ip_address = _np_.array(ip_address, _np_.uint8).flatten()
                if not ip_address.size == 16:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'ip_address: invalid array length: not {ip_address.size} == 16')
                self._ip_address = ip_address
            assert isinstance(self._ip_address, _np_.ndarray)
            assert self._ip_address.dtype == _np_.uint8  # type: ignore
            assert self._ip_address.ndim == 1
            assert len(self._ip_address) == 16

        if mac_address is None:
            self.mac_address = _np_.zeros(6, _np_.uint8)
        else:
            if isinstance(mac_address, (bytes, bytearray)) and len(mac_address) == 6:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._mac_address = _np_.frombuffer(mac_address, _np_.uint8)  # type: ignore
            elif isinstance(mac_address, _np_.ndarray) and mac_address.dtype == _np_.uint8 and mac_address.ndim == 1 and mac_address.size == 6:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._mac_address = mac_address
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                mac_address = _np_.array(mac_address, _np_.uint8).flatten()
                if not mac_address.size == 6:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'mac_address: invalid array length: not {mac_address.size} == 6')
                self._mac_address = mac_address
            assert isinstance(self._mac_address, _np_.ndarray)
            assert self._mac_address.dtype == _np_.uint8  # type: ignore
            assert self._mac_address.ndim == 1
            assert len(self._mac_address) == 6

        self.port = port if port is not None else 0  # type: ignore

    @property
    def ip_address(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[16] ip_address
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray ) -> None:
        if isinstance(x, (bytes, bytearray)) and len(x) == 16:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._ip_address = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size == 16:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._ip_address = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size == 16:  # Length cannot be checked before casting and flattening
                raise ValueError(f'ip_address: invalid array length: not {x.size} == 16')
            self._ip_address = x
        assert isinstance(self._ip_address, _np_.ndarray)
        assert self._ip_address.dtype == _np_.uint8  # type: ignore
        assert self._ip_address.ndim == 1
        assert len(self._ip_address) == 16

    @property
    def mac_address(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[6] mac_address
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray ) -> None:
        if isinstance(x, (bytes, bytearray)) and len(x) == 6:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._mac_address = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size == 6:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._mac_address = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size == 6:  # Length cannot be checked before casting and flattening
                raise ValueError(f'mac_address: invalid array length: not {x.size} == 6')
            self._mac_address = x
        assert isinstance(self._mac_address, _np_.ndarray)
        assert self._mac_address.dtype == _np_.uint8  # type: ignore
        assert self._mac_address.ndim == 1
        assert len(self._mac_address) == 6

    @property
    def port(self) -> int:
        """
        saturated uint16 port
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._port

    @port.setter
    def port(self, x: int | _np_.uint16) -> None:
        """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
        x = int(x)
        if 0 <= x <= 65535:
            self._port = x
        else:
            raise ValueError(f'port: value {x} is not in [0, 65535]')

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        assert len(self.ip_address) == 16, 'self.ip_address: saturated uint8[16]'
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.ip_address)
        assert len(self.mac_address) == 6, 'self.mac_address: saturated uint8[6]'
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.mac_address)
        _ser_.add_aligned_u16(max(min(self.port, 65535), 0))
        _ser_.skip_bits(64)
        _ser_.pad_to_alignment(8)
        assert 256 <= (_ser_.current_bit_length - _base_offset_) <= 256, \
            'Bad serialization of uavcan.metatransport.udp.Endpoint.0.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> Endpoint_0_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "ip_address"
        _f0_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, 16)
        assert len(_f0_) == 16, 'saturated uint8[16]'
        # Temporary _f1_ holds the value of "mac_address"
        _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, 6)
        assert len(_f1_) == 6, 'saturated uint8[6]'
        # Temporary _f2_ holds the value of "port"
        _f2_ = _des_.fetch_aligned_u16()
        # Temporary _f3_ holds the value of ""
        _des_.skip_bits(64)
        self = Endpoint_0_1(
            ip_address=_f0_,
            mac_address=_f1_,
            port=_f2_)
        _des_.pad_to_alignment(8)
        assert 256 <= (_des_.consumed_bit_length - _base_offset_) <= 256, \
            'Bad deserialization of uavcan.metatransport.udp.Endpoint.0.1'
        assert isinstance(self, Endpoint_0_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'ip_address=%s' % _np_.array2string(self.ip_address, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'mac_address=%s' % _np_.array2string(self.mac_address, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            'port=%s' % self.port,
        ])
        return f'uavcan.metatransport.udp.Endpoint.0.1({_o_0_})'

    _EXTENT_BYTES_ = 32

    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8dxmvl0{^X+TW{1x6vsEo?k3q>*jxw@pco1v(8ibsD5a$&4MjrJ(1_bxWsTQEW`ftYd`YvFDg_}Bl`M56rXQkjd<4Em)rY?K'
        'Q}mqOlWaC5eQ6_Y{^K)e&YT(hH*>bjzs-!6+JD8FxaFsQV7sYE6c5x-+zW*5Hlk)6r79Dq7<-f@c_Ygc@wgQW^VVE?VSYCAMa2zy'
        '6Z+5Qe6ztryD2iBB|J>yD9P;HkL_<mKaNzGnPSM@6iKS0(8y9T_>|gj4J)y}*XD&OMqHj{iSqJHq~-^Ren?)sUZ$wrQzG!Y`P5vW'
        'XWY#&$>QW8!;^%!Ofh{=Z3+K75w2%)8BM(_8*@b<nj*|7*de*ZiE64$ZGy+tlQ325q44jAnOGM|Z@dxLQ<)pIr!#B_GHviQbDNPb'
        'jGQfI)^-BnFnb01R<R4W=aqQ~>AGpgL!T%9-av11uNa0%F>k1>Wmvr^yIzo*Vs0nht}|qw?SD4K=r=0sY{DaWq;!h`H;PSR9Tp^Q'
        'HN7ZM4OsN5XhyIZ8NAEyW0CMIO1g`#x(%t|{Ybl*d?;d(se}Fc-RF?ITm-)(5Aq=3No&6o#M<ORF3hiHo(<{LgO!)vrV0()#s=TQ'
        '#vpEJ9&n7x`p~tcSwHCjYQJV>daj@jXjUcrAn6eG57Tq4GbI~A9n@@;p2tu}G#e+sBV@1B_zBcu%_gaT3UyqwY4STt_8HVk&5ogt'
        'X?C3YPf&idsK+%si8`&>Db%`Vr%^{W`-uF{pq4eWX#TUPr!_l=I;+{osK+!rPjN1wPG~kqd0nLS%u~Ees1?mFQ=XroUe@eW)OpPo'
        'Q0FwWQO|331@)X}4yvWuRn(6(`waDzW{Z@^HCoSg)EUigP(Gj2KHQ}BeL;EMqIG_WTGQ++%I`L6RkN>Y-FGO@rOx_uU`%Yqa2Vk^'
        'gSKs*d-&nVN>Nj>%Y8o)DZo;8{RqD0-ych1-CwiFZbi?m3@kEAGfRc-b||tRqvW~ewK8Evi7ygs-c#$A2z|xFOLp!4+UAX&03x+`'
        'BCJHj@B}A`@GYJ$sI={M?O(j|RE6snIxRGL9D}7dtZiTo^$t67O3qO0ggiy9Gi*p&^1QqN=YyPMRe4cfZg<HA>5$K&yiTo~;IJrf'
        'bsTPY`I2{-BbVT}d?-z&Lue`yP1Sug4eX<-Of;2<reUI~N;D1ZqiLLI8YP-)`)H~XO=Y5~pJ*x(O~;6)8KUVZ(KJmoO%Y9#MAHP('
        'R41B_5KZGm(-_e-N;HiSO*NuvcppuJL{pV$st`?OqG^C=>L;4|h^7+J<Pc2`(c}<K4$<TgO%BoI5KRuz<Pc2`(c}<K4$<TgO%BoI'
        '5KWHG<x6VpAT-kCja`Q1>*CJp^2&c<r}v}oe#-Ukr(7w@SXkg}(+KO6yK5F2tT1nSB58*hFGklO3m~YsHjq=r?7?^VW~6*5Po9G8'
        'y|ZEJr4;8Z!F=-X+!Mvro(jeFTAkttW51FU@(=k&{w4p+;i~r$<^~6r&6{G}eTJ2Wi;220(}QBdO`|+%2<Qle8*{kGi$Rn?d8Qa%'
        'gQ9C|4XtnCZtS}P2b7Gk%Ic4mDQYXNSn}X5+`Cxf<R09^ZX(v<)`R)F^$(nD)lO9g<y%i(2G=`OW~P|fsm*N1zG~ynm<&seDOd6o'
        '(n_%Ufvwt94PkzPJ)d939lrucq@a<z?>mh}Lp@WCb|GM!gAW|I-RaeQPy#^jUcaL&QHc8&9#~jl$%AzTB#3olcjQK;uT=Ul;Ks;~'
        'd1D+}|L>5iP}s(uRT<XTJ~g-D)ZE5XQ@(rv1}##wz60yKUF*gi1R?+4o}QDq4kvME_<L}Af8g-mo}S@LJHuB?eR2u^^#&Nq59&j}'
        '?SB9pBw27F3;+N'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
