# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/CyphalDemo/public_regulated_data_types/uavcan/si/sample/velocity/Vector3.1.0.dsdl
#
# Generated at:  2022-05-06 20:35:08.578931 UTC
# Is deprecated: no
# Fixed port ID: None
# Full name:     uavcan.si.sample.velocity.Vector3
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.time


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Vector3_1_0:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp:        None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 meter_per_second: None | _NDArray_[_np_.float32] | list[float] = None) -> None:
        """
        uavcan.si.sample.velocity.Vector3.1.0
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp:        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param meter_per_second: saturated float32[3] meter_per_second
        """
        self._timestamp:        uavcan.time.SynchronizedTimestamp_1_0
        self._meter_per_second: _NDArray_[_np_.float32]

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if meter_per_second is None:
            self.meter_per_second = _np_.zeros(3, _np_.float32)
        else:
            if isinstance(meter_per_second, _np_.ndarray) and meter_per_second.dtype == _np_.float32 and meter_per_second.ndim == 1 and meter_per_second.size == 3:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._meter_per_second = meter_per_second
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                meter_per_second = _np_.array(meter_per_second, _np_.float32).flatten()
                if not meter_per_second.size == 3:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'meter_per_second: invalid array length: not {meter_per_second.size} == 3')
                self._meter_per_second = meter_per_second
            assert isinstance(self._meter_per_second, _np_.ndarray)
            assert self._meter_per_second.dtype == _np_.float32  # type: ignore
            assert self._meter_per_second.ndim == 1
            assert len(self._meter_per_second) == 3

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def meter_per_second(self) -> _NDArray_[_np_.float32]:
        """
        saturated float32[3] meter_per_second
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._meter_per_second

    @meter_per_second.setter
    def meter_per_second(self, x: _NDArray_[_np_.float32] | list[float]) -> None:
        if isinstance(x, _np_.ndarray) and x.dtype == _np_.float32 and x.ndim == 1 and x.size == 3:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._meter_per_second = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.float32).flatten()
            if not x.size == 3:  # Length cannot be checked before casting and flattening
                raise ValueError(f'meter_per_second: invalid array length: not {x.size} == 3')
            self._meter_per_second = x
        assert isinstance(self._meter_per_second, _np_.ndarray)
        assert self._meter_per_second.dtype == _np_.float32  # type: ignore
        assert self._meter_per_second.ndim == 1
        assert len(self._meter_per_second) == 3

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        assert len(self.meter_per_second) == 3, 'self.meter_per_second: saturated float32[3]'
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.meter_per_second)
        _ser_.pad_to_alignment(8)
        assert 152 <= (_ser_.current_bit_length - _base_offset_) <= 152, \
            'Bad serialization of uavcan.si.sample.velocity.Vector3.1.0'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> Vector3_1_0:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "meter_per_second"
        _f1_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.float32, 3)
        assert len(_f1_) == 3, 'saturated float32[3]'
        self = Vector3_1_0(
            timestamp=_f0_,
            meter_per_second=_f1_)
        _des_.pad_to_alignment(8)
        assert 152 <= (_des_.consumed_bit_length - _base_offset_) <= 152, \
            'Bad deserialization of uavcan.si.sample.velocity.Vector3.1.0'
        assert isinstance(self, Vector3_1_0)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'meter_per_second=%s' % _np_.array2string(self.meter_per_second, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
        ])
        return f'uavcan.si.sample.velocity.Vector3.1.0({_o_0_})'

    _EXTENT_BYTES_ = 19

    _MODEL_: _pydsdl_.StructureType = _restore_constant_(
        'ABzY8e1>&m0{?YaOK%*<5hf||wG<^vlw?_w<(A`!WFn5qC6`(`aT0|JA*Zdipob&m;YrU-bGyNLWx9vt8ZZza5{SS689*ICKfyo2'
        'Kfyo@Cr96M$i>JdS07U~+p|l`lmP0h=|@#{J-+V!^U1&edv>JySG<|_0u_Xgt9T|^C_iCd$Q{>DqBK!bb5qPd(pm27JmZghDL2o}'
        '(r4yVvsjF~F^gdSdd_xz7CTBhibW~x-sNH9OWkum;=WF@HB(HvyF61eiH#U3CO@+Bb3;ez$Y0H8rkHV=)|vEj&6W8BXn%!YgH@&&'
        '-;z8GhW<3%fNADxbW)7<2gUfnJuM^dJnF^1$dXuo!h^>!pfq@F#H5(6JrSqCx|p-u=U?SVn#o9NxeI>GKZ%v>#yogG*1XHJqfwf1'
        'J*nN0$6YN9ZG)FSQ`(J^0KB|fTzpU~!fnnb%-zQ+49#E6LsOi0!N)jYS#Vg<LGHoPW+LfliQ;||2c|gb28nN;{&#F-<gwr+&LfX!'
        'B-tj1Rw<$d(?qacPEw{64~UYn&xuMRPFMyeGM4p71fQ`cGKTflO6@dIsT~KUNhZ56y(k^-+^kk%fQiQxUm{YGfNx8P2}yaj%+fTJ'
        'KGTqMhoBli&ob0A*n*aF#T$?);&GDkKjn}c*uI@5(NMb@q_0v&B5;gnH;LlBTI467SEX=J8Fyhc+m&#($`x5zZ@?+Qxm_0K9KF;D'
        'iTN&u3I5v-lfAxwgZb9RGK7Te$pHN1J_8@$Z8Qj3Ce4pq8%HAx%bAztnlzj37U^-8shea^NMGO-^hFFELGF-^^-AZVz2J8awUd#('
        'Bo6~H1QrO%<CyzgDVE8w*LML5fk>?e-a^=58+eNuX@ONOl3d}c$~;U5IjA5Etbt;_FCkvBhB_vGCY4l9|1g^&)PnSvH}7=FVw`BQ'
        'b$5wCCBzWR4D9(VgQCb&jMpvV^`J@7V#<19!m1oYqJRvX%JIi_sz`+HcVV#-EDSNjSZ>{rFIUU^Cbs!7P!WfLevRru9-t@|G?oR%'
        'Aj8=h5<?(}$}!Lgr;Dl0B*r$;gT52<;+mDN)3$g^yiG^2pTt7Hbta#5Xy?P<bc|RkZv2*K$;+mzdV{=SG<M=-FLq2Z;Z_cr;*FXV'
        '_<jlnhh%ny5~dzj^~u88AJHnN;mAIYDwyB0GRzmFD+WDNUheT?{tyqkUawEFc#1`FS*(fW90(=gU=-Sk2j-wS?QY9`9=Mn&R|ck2'
        'oOM-_XFi9Ckh>`Zx+o?QLg|@e`T@}T{sSC+4)iqo4iJY(kjKYTX^O^XFNIv)<xygaD{1aQ<GLB|<{{b}GAtZoqED=_A7f>TYsZqS'
        'v+Ark7%Zca&gNag6gY+L@7e}62atq+bovdC76@9vYJvVwGGGG?GS)3LHG_uLdr7vlTy=yxWV6ayWfUq!iz6Kd3X(AIb3jD_Lp$&x'
        'WLH3sK~$3n2rjUOv0l9dGyyx+EL`>AF04tiWtDPYZp%Y;4j04@caV#{5JGgLu9G2k!=d%d-=;YAOQ}Doz8~>H5f>-iBsB$jl@is9'
        'yae(CQN0iOvZVMSbR&aXcX$O&xW0h)H{$ojnFlODZv5UN!Em;dhau4a%d?{OH?v6FrSjk+Px~4Soyt8pXC!01)<9tUC`{tj2GxQ}'
        '=_u|SDe0KS6NqCaJ!!wk5l2fpVaF%!_>{$IJKjK?DCvw{e+qG`q_c=8OM2R_KZ7_^(m6YS7ID0!=d7N2#B(J*k2qJ-3y7yndJ*wd'
        'Nnb;3l=PC_|GKq%+1j~c^<1^~-ax!k(rbv9OZq0_>m?<Kmr8ma@wJk^g?O=~KR~=t(zg-Mm-L5-^Ci7u{aQdgThc}A-xA`PlK#m0'
        '`D4V{lHRobF5B}u*6()^r%SqG{a;0#ENRo8W6j26-JYk)>xq(X*mK>o@on4l-R|d|zH9L(7Jq8-J&QlH_;ZWDuz1hnQ;WjlzQt!2'
        'Us(Ly;ujXbwD^t1Z!Lb;$NN*GR=89Pi?z_Mg?qK|v=&4y?AOAxT6j?lpVz_{weV#vd{YbG*1~sI$l-MdHv-%vNbPpaLt=*;XIc;6'
        'n@hzAUR=Xh=9O2xcC(E2;0?Hi6yN8EJ2-Uoi8<@?kmI||zJ0G2(_3&a>m#e+8YFNHHpRj-@G@ducoF6J27RwsSX*Cdwwr6~8yjow'
        'R<qr1-EOb0-db5-ZLh7j*ITO_x0|i?_5L*lO+O7!*p%S|-_R4{iFn#4iQkEj4{^!4hdkw49?wW)?hbBcqI-y6NLfWHq<<6<{KcP|'
        'nm?5Isxye=T*Tqc<AP4tzI?@!_$S<*;ttyWTAUUC6aUJ^=7G4|5x)}m7RCGG*Mf=<#C_2z#uVIg6a615a1qx(RZKBwf2<t6u*9PS'
        'RDb*_{eg7&<QL#Eg12*gEFEL?kd5I2#NRo`YIDU79j!vqhETLI6jcPof4IWY7clx_IJ$#W{Jmiem-Bz*9Z+rR4FCW'
    )
    assert isinstance(_MODEL_, _pydsdl_.StructureType)
