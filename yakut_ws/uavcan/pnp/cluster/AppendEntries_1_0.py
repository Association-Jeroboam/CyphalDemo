# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/CyphalDemo/public_regulated_data_types/uavcan/pnp/cluster/390.AppendEntries.1.0.dsdl
#
# Generated at:  2022-05-18 08:59:55.546045 UTC
# Is deprecated: no
# Fixed port ID: 390
# Full name:     uavcan.pnp.cluster.AppendEntries
# Version:       1.0
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.pnp.cluster


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class AppendEntries_1_0:
    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Request:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        DEFAULT_MIN_ELECTION_TIMEOUT: int = 2
        DEFAULT_MAX_ELECTION_TIMEOUT: int = 4

        def __init__(self,
                     term:           None | int | _np_.uint32 = None,
                     prev_log_term:  None | int | _np_.uint32 = None,
                     prev_log_index: None | int | _np_.uint16 = None,
                     leader_commit:  None | int | _np_.uint16 = None,
                     entries:        None | _NDArray_[_np_.object_] | list[uavcan.pnp.cluster.Entry_1_0] = None) -> None:
            """
            uavcan.pnp.cluster.AppendEntries.Request.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param term:           saturated uint32 term
            :param prev_log_term:  saturated uint32 prev_log_term
            :param prev_log_index: saturated uint16 prev_log_index
            :param leader_commit:  saturated uint16 leader_commit
            :param entries:        uavcan.pnp.cluster.Entry.1.0[<=1] entries
            """
            self._term:           int
            self._prev_log_term:  int
            self._prev_log_index: int
            self._leader_commit:  int
            self._entries:        _NDArray_[_np_.object_]

            self.term = term if term is not None else 0  # type: ignore

            self.prev_log_term = prev_log_term if prev_log_term is not None else 0  # type: ignore

            self.prev_log_index = prev_log_index if prev_log_index is not None else 0  # type: ignore

            self.leader_commit = leader_commit if leader_commit is not None else 0  # type: ignore

            if entries is None:
                self.entries = _np_.array([], _np_.object_)
            else:
                if isinstance(entries, _np_.ndarray) and entries.dtype == _np_.object_ and entries.ndim == 1 and entries.size <= 1:  # type: ignore
                    # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                    self._entries = entries
                else:
                    # Last resort, slow construction of a new array. New memory may be allocated.
                    entries = _np_.array(entries, _np_.object_).flatten()
                    if not entries.size <= 1:  # Length cannot be checked before casting and flattening
                        raise ValueError(f'entries: invalid array length: not {entries.size} <= 1')
                    self._entries = entries
                assert isinstance(self._entries, _np_.ndarray)
                assert self._entries.dtype == _np_.object_  # type: ignore
                assert self._entries.ndim == 1
                assert len(self._entries) <= 1

        @property
        def term(self) -> int:
            """
            saturated uint32 term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._term

        @term.setter
        def term(self, x: int | _np_.uint32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._term = x
            else:
                raise ValueError(f'term: value {x} is not in [0, 4294967295]')

        @property
        def prev_log_term(self) -> int:
            """
            saturated uint32 prev_log_term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._prev_log_term

        @prev_log_term.setter
        def prev_log_term(self, x: int | _np_.uint32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._prev_log_term = x
            else:
                raise ValueError(f'prev_log_term: value {x} is not in [0, 4294967295]')

        @property
        def prev_log_index(self) -> int:
            """
            saturated uint16 prev_log_index
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._prev_log_index

        @prev_log_index.setter
        def prev_log_index(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._prev_log_index = x
            else:
                raise ValueError(f'prev_log_index: value {x} is not in [0, 65535]')

        @property
        def leader_commit(self) -> int:
            """
            saturated uint16 leader_commit
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._leader_commit

        @leader_commit.setter
        def leader_commit(self, x: int | _np_.uint16) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 65535:
                self._leader_commit = x
            else:
                raise ValueError(f'leader_commit: value {x} is not in [0, 65535]')

        @property
        def entries(self) -> _NDArray_[_np_.object_]:
            """
            uavcan.pnp.cluster.Entry.1.0[<=1] entries
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._entries

        @entries.setter
        def entries(self, x: _NDArray_[_np_.object_] | list[uavcan.pnp.cluster.Entry_1_0]) -> None:
            if isinstance(x, _np_.ndarray) and x.dtype == _np_.object_ and x.ndim == 1 and x.size <= 1:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._entries = x
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                x = _np_.array(x, _np_.object_).flatten()
                if not x.size <= 1:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'entries: invalid array length: not {x.size} <= 1')
                self._entries = x
            assert isinstance(self._entries, _np_.ndarray)
            assert self._entries.dtype == _np_.object_  # type: ignore
            assert self._entries.ndim == 1
            assert len(self._entries) <= 1

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u32(max(min(self.term, 4294967295), 0))
            _ser_.add_aligned_u32(max(min(self.prev_log_term, 4294967295), 0))
            _ser_.add_aligned_u16(max(min(self.prev_log_index, 65535), 0))
            _ser_.add_aligned_u16(max(min(self.leader_commit, 65535), 0))
            _ser_.pad_to_alignment(8)
            # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
            assert len(self.entries) <= 1, 'self.entries: uavcan.pnp.cluster.Entry.1.0[<=1]'
            _ser_.add_aligned_u8(len(self.entries))
            for _elem0_ in self.entries:
                _ser_.pad_to_alignment(8)
                _elem0_._serialize_(_ser_)
                assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
            _ser_.pad_to_alignment(8)
            _ser_.pad_to_alignment(8)
            assert 104 <= (_ser_.current_bit_length - _base_offset_) <= 280, \
                'Bad serialization of uavcan.pnp.cluster.AppendEntries.Request.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> AppendEntries_1_0.Request:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f0_ holds the value of "term"
            _f0_ = _des_.fetch_aligned_u32()
            # Temporary _f1_ holds the value of "prev_log_term"
            _f1_ = _des_.fetch_aligned_u32()
            # Temporary _f2_ holds the value of "prev_log_index"
            _f2_ = _des_.fetch_aligned_u16()
            # Temporary _f3_ holds the value of "leader_commit"
            _f3_ = _des_.fetch_aligned_u16()
            # Temporary _f4_ holds the value of "entries"
            _des_.pad_to_alignment(8)
            # Length field byte-aligned: True; all elements byte-aligned: True.
            _len0_ = _des_.fetch_aligned_u8()
            assert _len0_ >= 0
            if _len0_ > 1:
                raise _des_.FormatError(f'Variable array length prefix {_len0_} > 1')
            _f4_ = _np_.empty(_len0_, _np_.object_)  # type: ignore
            for _i0_ in range(_len0_):
                _des_.pad_to_alignment(8)
                _e0_ = uavcan.pnp.cluster.Entry_1_0._deserialize_(_des_)
                assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
                _f4_[_i0_] = _e0_
            assert len(_f4_) <= 1, 'uavcan.pnp.cluster.Entry.1.0[<=1]'
            _des_.pad_to_alignment(8)
            self = AppendEntries_1_0.Request(
                term=_f0_,
                prev_log_term=_f1_,
                prev_log_index=_f2_,
                leader_commit=_f3_,
                entries=_f4_)
            _des_.pad_to_alignment(8)
            assert 104 <= (_des_.consumed_bit_length - _base_offset_) <= 280, \
                'Bad deserialization of uavcan.pnp.cluster.AppendEntries.Request.1.0'
            assert isinstance(self, AppendEntries_1_0.Request)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'term=%s' % self.term,
                'prev_log_term=%s' % self.prev_log_term,
                'prev_log_index=%s' % self.prev_log_index,
                'leader_commit=%s' % self.leader_commit,
                'entries=%s' % _np_.array2string(self.entries, separator=',', edgeitems=10, threshold=100, max_line_width=1000000),
            ])
            return f'uavcan.pnp.cluster.AppendEntries.Request.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 390
        _EXTENT_BYTES_ = 96

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8i?xJe0{`t>ON<=HdF~~byTj%~O_8FO5+#->iky{aM<n&|in44md_;7M4^X5`z*a^z)3sB*?CBnL_v}M}0r`+XHU`K5ngBk|'
            '(YMS|w_JTOf}G+c$QwzN$H9jH5fB*2|5yE0)6=snF#-bQAOT|4bXQeZ{q=p{|JP$bp8uoqcOCU#|5SH7$bzWe$V3|QDEx>wBT;X('
            'l1?|t!dwjdhpvh!>_9fSx7`)PPlwAt8UA=!?JqRKI2P$pI{icM=4r2$_fj!kWM3oZ9cZH3;~Om=*Sm4I-imrzF4FqtZdb&?wKz{h'
            'k=5^t4|^iZhy6-pL!?=l#MtiQdzAll=+F7i9}Iso>>p_G9O^WCxyXj^!$)=*fh{%c@4Fs~D42B1Z3H~$jU4;BTlH>=V-7c<#L@e4'
            '7Pey%+=z407U}dD4>X!#-iSop&gIZ&(0Geyd83mAVkl4akKZv3VYT`dcy|+D!HAsSAKo4Ik2SKK#{o}+Vnd(wn$qphgP}UZ{(K`y'
            'TEo6GgojV)&&nnFH07T4nLH(*muGaHL)}ztG@_*4P?hCbd2W|#Ua{I?TP=(OvGvIH4n=|oB1OQ!Friw%dRMH8l;sJ_rC@jYTF$z>'
            '3s2UPl!>iw#ABYrq}Hc~(|>xGX-reTJ?uaE9*3v!<Q-+7%lLG99u74`BswC_^}NbOYT4~C?SMYS-S$u(l!pzl<PiYVSDSa9tok*F'
            'DKGVpT@SZJu-iD~_X=OG*f00@1FX8d73SMR-vdN6qioneYiu?_4wx@5{~q=a{!W<dFTM*u>0AB1jifv5v)vlWwmZ!v3ITaXZ;DO='
            'GlJu}4P)eak`{%aB}3qs{89h$yP_-daOZM+8V{lGl0&)2ZuO#wr`zR1(AEZzdSdv8!>V5yWK9_Pe4`V_L;qvU@GZ<NBD;DK$5#D0'
            'Eb0vWJ(TXnbkD$_r{DW9-8=9X==mb06?(s)e!KdU{sBxE2mV3&eF)P71OG6UdyJlYRR0L3`v?Bx^!_NOhX?*KD)$6EKaT0+1OG`('
            '4-Nb!dVhlY_Y|f}1OI7Ej}82jn0f>M8B7lj{Aa2BDNN@FKBMnHhv_o||1_pg4gBXZeRANRp>|%t^vJ+JOZ_@W<Ec`6%b4yP_%BjF'
            'zlG_G1HXo8b>OdHdUoK~F+DTzU&8eCz(0>E8~7J6eRkkq#PsCAf0_F63XSJgOpg!z*Qh_=COfRs_+F=eU7~TmfvG$2zeD|d6Vru('
            '|6LmQ_o$z5(fHrSbamiAp#Dnw?iSVm1k;ZP{?94>1*M-+`b$cGP3h;9excKwl{v~RnM~DWR!!z@lX+k=(qy(w<`a|oxyk&(WIi*Q'
            'Uz*IXP3Cix`GPV%a4?`QJXU^@o;8suAWr*xaR`325eBGG_514A%8jcmSp$^{GsdGRX(<}N!9Egc!ooGyiyy|xW?82u@_Cr#GX}R+'
            'zj1X&G{4$M?9-gqE`|4x7Cd;PxvgV_9}neU%fHCLodyD25p+@n!=LsKH`Y)s8{H($aagzdM;ckuOIre7M558<;4J%#m_%W7*x!E#'
            'qL!^Y`1DhdoVl04d&&f3kUiaS*mtjNcO{Rmf}9P(<Mf&!Z;e#6K}_I#ldu4^bwLjs>f^v6?znNaexZK8j#@d)(Q_YdNS;9tQgk}t'
            'wKl?*82%It|0h?)S{Ms3H^aIx0d@BtI0=xiu+!@>Fh>|LWfTUJ0t1Ff2pVBYtei;?ex=cN7`IuT!c61fS;V)&Z@KSbt&By<CORL<'
            'V|L-<DuX`2+-~yij2cHL1d~0fpVi$dhn00jD_jdT7*z320*!?6T2dd%`|^RBO8G<ido-s?w(syDfNsrbJG_;;!b45#tO=1^SC=08'
            '6@WnpFcHK5$*!V3R}$?x67Bh2M0=4$dx1oIABpxniT2)-XwQ{I+auBTNVGi?ZI49TBhmIqv^^4Sk3`!e(e_BRy^?5qB-$Q{wnw7v'
            'k!X7)+8&9vN22YKXnQ2u9*MR`qV17rdnDQ(iMB_g?U87EB-$Q{wnw7vk!X7)+8&9vN22YKXnQ2u9*MSB5^aw}+auBTNVGi?ZI49T'
            'BhmIqv^^4Sk3`!e(e_BRJrZq?MB5|L_DHln5^aw}+auBTNVGj8+MW?@&xp2XMB6i>?HSSbjA(mCv^^u*o)K-&h_+`$+cTo=8PWEP'
            'XnRJqy+Kd@iZVv27f~2Ur=Py1MPdh)Mo|{>Z;)Z%m)GT=%6Ha(H0L<-&wBFjek%X|mi!0#PgVKP@?YfV@?Yh@$$#(fg(w#Uk>cE8'
            '|FDX5r<F_o236{3w`0NX#CMEF6+X*^ssy41y+J)hnc@)Nf)1%pQo!3v;!MO@54+q>(lD2uI=cfaf=sZqs5YvNsTH4+oIvC}jI!MX'
            '=f7;OC_+zMNn&&l@s8mr2Fe(Xf+*wa@XK3UkHMJg$NGnm+pT<2+89Wi{H;Hy6pewRF|BAunI0(|-BSuj=Sk7_k)rJ(MRQAG=mII)'
            'JSp0qlA=9EiguV3?GP#2K~l5>q-ZWF+Wt})x=4z)K#I1H6m6aqZ7(U>9#XWqQW(le(HJQjBSmARXp9t%k)knDG)9WXNYNN68Y4wx'
            'q-cy3jgg|UQW(le(HJQjBSmARXp9t%k)knDG)9WXNYNN68Y4wxq-cy3jgg`;QZz=2#z@f^DH<b1W29(|6pfLhF;X-}ipEIM7%3Vf'
            'MPo+Mm{Bxl6pa~0V@A=KQ8Z>0jTuE_M$wp2G-ecy8AW48(U?&*W)zJXMPo+MAk&l$ks%pIK!(vHkfH46osyehD7kls$gogy@AE{4'
            '1tNo6BEw?Iy;q0~4w2yykzs+zaJ=N+T_VFgk>Lc9;TVzOF(QLYWY||C!$~5;5|QCp$-N&WGE|5R^F#)R$nXM@;WUxq6p`U1k>Lc9'
            ';W&}uXvw`FA~Lu{hD9R7Jdt6J$nXl0;UbaYJdvSJWT+7tUL-P9i413n3}=W8r%Plo?)_~d!zz)XN@Q3fGE|5RBO=3y$S@)@jED>)'
            'BE!g#VPwcKGGrJTGK>rvMurR{Lxzzd!^n_fWXLcwWEdGTj0_n@h72P^hLIt|$dF-#WcV!wyWg<k8#a8yhX2&AVGLv#e~mb4t`sND'
            'mEt6`@^eaY(jt+eLS#5lBEv!{PTE&m`BjJv4w2!pQk*nLWH?4-I80=y5E=Fm8J;3CJW*Qt9Uw9+5E<r5anea5!xE9<SZU>VkjPLW'
            'GRzYh93sOqk>M<n;rUXW^bC>VDI&v@M22HTh9g9V!$gJyM1~5HVIPrU50T*#kztj{@EVcf6(Yk$BE$Jooa7K0-X=1v5*eyQh9x3H'
            'g~%`_GK`4~V<N+t$S^i!7#lK-4H?FU3}Zuvu_43QkYQ}dFg9cu8#0Uy8ODYTV?&0qA;Z{^VQk1SHe?tVUBfqQ_=XLd4Fz<leSv%a'
            'T>o)%2D65TmUNgkeI)dpKZi$$dV6)JmGchk+Tt1(4_2m@)KA{!aa(-Z+08=Zp+0??gVx*7rb4pwh)8y3u<TegI~LE5MYLlv?aZLs'
            'vAA|DvK@<UX9nGl#kXS-?pTaF7Uj+i&K-+%$70>FXm>2$9gBF!V&1W+cP#E5i+smo-?8X-EdCwK0LOB`u`F;b4;;$`$8y23Y;Y_e'
            'oEb(qmJ^O;g=2Z)SY|ku8;)g%WBK7&hB%fZj%A5sdE!{6IF>7pWs76^;#kHwmNSlJjbnM^Oqk;+?&u(+0$}{?Q6lcy(?K+lmR1{g'
            't5OP#6@2E}+ySEgLHp#8&h0TWJ2@r9w;q*0qMsZlFsgSt61Uql>Y0{YyZKxpFjla)OZMFfo!d`fRNs7B=Z+iswHwhDjC!B7UpS?6'
            '&kz_Z2&m_D?kIs#_49fAjWf3H3p#hkMC*1dr-A^j+V+-p?wFBgyGdO^fYxYaE4JOb9pg(n_bmcr1%rVLI`;yBv4YX{%Q|<8z^K0e'
            's?MDtFe+Po+m3A2_T+VI_e<73Z|K~jIeElhy{U6^1jdU09RgzoLHm}@tr{>^{Lcy-yh87D4&~Vge++v0gCxyz*3vtp-N+og<Y7lJ'
            'yftt=iS(IHi^r@f7+%2X<sx7_yX3lzZL0b+Ro`S)vwdss2Q0G}S@j}=uXi)tt&PQ2t}k_{H>tj9!@@Wh=?0IczP{|b*Xr$hjkUuK'
            'p%0^G%0rXq>#wp*w30Z;YO2uYmy8ZKdaqo*#hSg0g?cb}WQE<%phKpoFBV&cabX$yRd@AHG;T)2$9N~{#d;$e+YfWL8RAhFf2cpk'
            'VaS^kgXRhJ33sa19VK|X)`Qa2O|zXHgc%)41}sY2>M-<Zzj6hu@i?CxbS>?8Jp(5E<kf4}FW-OXUgPGCTa9b)T)T4b#_d~;dpB-g'
            'yM6y2Zu3`usE6}Dc;Wst=F)}O>ZT&Y!`!JmN0qzEf;=)`hC2J#Qr^O+8N9zvd3fKSyEw#n0Fk%;mwU<cKT=mOKiH|O56(j)rnm0z'
            'S}1hFSe;*rNVM$yCOxoe9H;_x>cFz_BT;kn!jUJ=K&OMpoWU%j2=akQ;Zulsm`0pD4HjtP%c}zipl36^T4pZ+xTtgnKdQy<u@!b<'
            '*;U7~P(s6%XIZZ!5M(@8<9SEjZJM-^#A1Rgj#$EP)mWC;I;l99;j2!P<*GcMdEiNIi${@*b>eM!i5HdX?A=~V!pJ4x2m!YM@1zS2'
            '!jQlO0P9vNc&?6-dvOTJ?kEmL2@h(FN4ZRTZHeWO8lA4b{iH^+VorDK?(HVD-OHlw+Rkhy+ZWE0)ks3r4FTq^!8daz!!`^}A6aMW'
            'v^h@lsafHQn=mxK?Y4L?n;0rX1_E;O5C+2l?H!Ic1?_x6=VL7$z(s&~2YZuc@EvtR6!C2>0K&q}o}8xuyrcuO8DJY~d>F{GDsZsI'
            '0Nw9{p<1mZRWmSiRjbbK=_;xbje$1&>_t2UA$2pba1@|<z#@36rDwDQY7=U9U>CJ*>cG(Te>CKS{O6GG&%I)qNym6E$m6mmtMY<e'
            'k*~>%>wgZ#<m&q0LbCo>_|I?fpZ|b=c01x*Z-6^l{{a5!KlSqK=SvqUO9y?Q0Gp#Dj`Oun^6t&Ph1xK;`hJ1tHzFzKaZ6BpZc$1L'
            'M~XS#-UD0an*!t{6+tf!Kv_)@a3K1Fn)*0j;2&Dx8dU8NHKC<GO_wCZR!ib!XYOp9JDh5&_HX1YNB~#}Uf%6S+XfQ`elc)or>+4D'
            'ghI6&5<yfA<&DZigsx^#M>!HC{kE0IZkn_}>-C3b&RlVVKmbFeKU6?3wXK_|yVuNMtpTZ`Ksv@jp{t6W0oV%FU_uNSZkm9DK@Nh('
            'WxP$NvH{*zQL8>;nFYXPri(tEP%|@Z-b#VBJ5H>|+!_y47*P;{Y~=2=V0{%9Yp5^kx=to1V^Sn`Pv3~yyMm`6rO*lp*nPY{qc7EB'
            '$FA7sF58h+uWjX8x9EoP@@dxGW>-VePT1|Z&C^7g_4|p8*=^-DKnrqxjc0<;973yEuaRo6fso~(6(LU{K*{B#%VcOZSO_+7z&Y?J'
            'V-zzgYvA0dvwK#h;btg}cv&igKu;{!*e1FgCN=~VQYZG4maH-Hx~d!ZI!%$*=yDNV3ad@rc9KF2(oM9ZGSJj2TZQSzn_?Nd1oTNt'
            '5|Kbn>rD_PY0`l?&Tu+gE;g~O=$s0`kEl)hgX1-E+zfN_Ohjv7op(djlVbd!M}USgHZr*0fqryd9cOgn6AGl$ZcKLy`s13&8S6F^'
            'ynPkSbUurD7yLo4Z&cyc2DF}@y-ruhV!+v$T-wA%e%J%R2Q^p42;d;i8$~WPh#B`i#fFI<yY3GpGC!VB3uP(M;1f*W#Ga;-j(BQn'
            '=A>vnRMVL62tH2NJ{03ajCM9-mrSOyq7i@!8lTH+#c%Q;$V{D?dn86=@oUv72%6{v^#vduD4w_)ZbT;VCJ+V{tzvBj%N3j^oHP?c'
            'wR;?<N2#Kvqa7(-kedvcoVtrnUG=o4Be*qn6HdidI8(7e)#iF2S+A?E<He%QF;v%p2IjO7QK(WNvq?5VUm@Hm0-JcS2~#Upl9;@N'
            'L2ihFNV1vBn!3d|v8YBCG}hs<3L(|_fxSSAmT@Bx@`$ct1HevwQD1x1I=mrd*g{v_%k;E@LDs@{FSXdC66Z37?F2uR8DqeD1>_sL'
            '2)58Z3Am3k5a-c0gqu+?)muBkon%9g3xYAdD1&OkP*Pt9!ev{rGFTA00kIfLZE+?O1u}QyVcvjw0sXh7Gl^zvDobJD44=+GM<Q?v'
            'LPf)%onfSBA_k9|qz~0iOn`5VB?yAeko<d*N3L3E@?M^FQ0KIB&vVh~=6ac_96!x3M2jeg!UQY@f2f69U5rwiwF$UUeFxz&PS_U4'
            'I2>EYFmw}VA4QO(x5Iv(%dD(T85dUz-1HkFpTax*P(0OyyOS~&y3kBv&4GW`VnT<Bi@FN@Oq2)O#Z3X*^DvrP9)_8#qnm&#W2C5q'
            'nBrIQTJmm#CEyEm<CzlwWCzIv_wi7Rqiep+BegP{!u*PY;)-fOQ4zvp=zp$PMEL|wrk0LEOWh@TGEgBWH*s8g!-I@ux>Hr&8+-tO'
            'Rzv_fg)p3I0NF|aeL%7;11j#K9Xpen9f1vJGVC%F8yeR_8ik9u%m~iJ@#u9O?UWS60KRcKW0Iqsf}2r)!V<=lXsaz^k%EX6!*Uw)'
            'F1HBRgj(s<idNFL+~hgTDRjZ5+vgNHkdYu*B_b1duzQH%Vyw=0i`Hwztn6VSrY@MmorxJprFz|f=aaa7hc8Y$RSC=64HH)x8R;Yt'
            'O($BjunTIy?vxafXE6Rc#>KhrokDqeim`h*ar#fJ>;-Pg)16jW)vzw=dh^BT<uYzMfbXlbyE{eaw9HkDqKTL#P4tr5lxeT%v}w{o'
            't&ze6QFm$rtGEF`VPgzq;lZ+9LhTy1O?=@c6QxXjlovtbqU9~}t3vHsauZ2lcz~7l-U#mDMG?|LIT<}q(_RmX>9zvUjJSu>zpUp~'
            'KXwf-L;SnQEW|D=#b3i+jNO7!pww;D6V*;H#Xl6FNzqe}xHF5wLS4JxgrX>5HPRMpj|Ao)#zckGl47z7th<+saUtCz-qfxG)<41Y'
            '2Qb=KTP)Z;Fm@A=hb9TaNt6K!s5anM*px?7w$g)%3L%ajQeBn5k!R%%R_nX%0-WM7m?jNuWS$A`6^J!S(Cf_F#_AM&kEt*v64(HQ'
            '0ccI-UQjhJ!>n0474|A1ieFm;C|T@7K!qL&@hL*ZLhZ#j@nf{vfjj9dAj|aBt^{CNjs6B!>j28=e{q}n5$_-We=Gmh_o3ylZoz|c'
            'Iekv|78H7GQpnUTJud$_iLQGG3f-BlTY9{6-4CG92gSPjHpcYh^{aawN0*l}zPU6vTcPw^pZCZE@}Tte-;f@cRk<QB%2mCghkJSd'
            '2b+KEUqCUt$+!OBxZSwePytasyy@)iA8!QohudjG>OaygUnXGk)cR%Y!`Hn@z@}~ztlzeW59@a!3wGr*7Z1>ex4?wXUNoUOs?C%w'
            'mErLv+u<cvt^W^SQ7ApTJ^%m'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    # noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
    class Response:
        """
        Generated property settings use relaxed type signatures, accepting a large variety of
        possible representations of the value, which are automatically converted to a well-defined
        internal representation. When accessing a property, this strict well-defined internal
        representation is always returned. The implicit strictification enables more precise static
        type analysis.

        The value returned by the __repr__() method may be invariant to some of the field values,
        and its format is not guaranteed to be stable. Therefore, the returned string representation
        can be used only for displaying purposes; any kind of automation build on top of that will
        be fragile and prone to mismaintenance.
        """
        def __init__(self,
                     term:    None | int | _np_.uint32 = None,
                     success: None | bool = None) -> None:
            """
            uavcan.pnp.cluster.AppendEntries.Response.1.0
            Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
            :param term:    saturated uint32 term
            :param success: saturated bool success
            """
            self._term:    int
            self._success: bool

            self.term = term if term is not None else 0  # type: ignore

            self.success = success if success is not None else False

        @property
        def term(self) -> int:
            """
            saturated uint32 term
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._term

        @term.setter
        def term(self, x: int | _np_.uint32) -> None:
            """Raises ValueError if the value is outside of the permitted range, regardless of the cast mode."""
            x = int(x)
            if 0 <= x <= 4294967295:
                self._term = x
            else:
                raise ValueError(f'term: value {x} is not in [0, 4294967295]')

        @property
        def success(self) -> bool:
            """
            saturated bool success
            The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
            """
            return self._success

        @success.setter
        def success(self, x: bool) -> None:
            self._success = bool(x)  # Cast to bool implements saturation

        # noinspection PyProtectedMember
        def _serialize_(self, _ser_: _Issue110_) -> None:
            assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
            _base_offset_ = _ser_.current_bit_length
            _ser_.add_aligned_u32(max(min(self.term, 4294967295), 0))
            _ser_.add_unaligned_bit(self.success)
            _ser_.pad_to_alignment(8)
            assert 40 <= (_ser_.current_bit_length - _base_offset_) <= 40, \
                'Bad serialization of uavcan.pnp.cluster.AppendEntries.Response.1.0'

        # noinspection PyProtectedMember
        @staticmethod
        def _deserialize_(_des_: _Issue110_) -> AppendEntries_1_0.Response:
            assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
            _base_offset_ = _des_.consumed_bit_length
            # Temporary _f5_ holds the value of "term"
            _f5_ = _des_.fetch_aligned_u32()
            # Temporary _f6_ holds the value of "success"
            _f6_ = _des_.fetch_unaligned_bit()
            self = AppendEntries_1_0.Response(
                term=_f5_,
                success=_f6_)
            _des_.pad_to_alignment(8)
            assert 40 <= (_des_.consumed_bit_length - _base_offset_) <= 40, \
                'Bad deserialization of uavcan.pnp.cluster.AppendEntries.Response.1.0'
            assert isinstance(self, AppendEntries_1_0.Response)
            return self

        def __repr__(self) -> str:
            _o_0_ = ', '.join([
                'term=%s' % self.term,
                'success=%s' % self.success,
            ])
            return f'uavcan.pnp.cluster.AppendEntries.Response.1.0({_o_0_})'

        _FIXED_PORT_ID_ = 390
        _EXTENT_BYTES_ = 48

        _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
            'ABzY8i?xJe0{?YXZEqYk5Wb^nE=^KOl{UOoqFYhI^~*L;Bq;AR0YsM^rz;?&s<OPhlN*E2YuVmY4hgCK0BR&lM2h*&Pi4HDCYQE3'
            '>9pSQ%ri63JhP7%{#{+{G(Ue`&q`a$lvyx>OYsNKC8VsVCc3i1LGTy1L5c|-%b#W%!eO}eB>Wlrevt{Kzy$30iw~Ts3s)OB?Q)(e'
            'J|T!(HJ=t-rCRB<khOJS(yz4!ReqzK5n$61SY0VgzDsNh#)?Ws;NCAs=fjY7v(De)N$@L-I||Bc2R1ySEN8TE>=pd^Zw1Kmq^@OF'
            'a>tpA#hw+eO>A0B$z$zjWyM%Q`Mq*526MW}6_yLfB&e~&kR=3OaO>ElDk0#Tetq~1D2An5bhi_)sH4tbVHEroW*t{0H|0Fg(>ljx'
            'zd%e)f?r@|RRrG&WW3s@#Wx6h<z7`u;ObOC_;%LC>-Y}d+;1>?wk`^=HsFTuk6;%};;O_UBqP4-63sPPb}N&>o|as3M|`K03H;g|'
            '(=4C0!;Bf;#dS=vUsLZTXafZ&b%cHYD%%x%P%>Q^$3z(h{xY*wZ3>_Z2~2b9%=h9$iahuWL(<sZFj^0Z$?k1x6|1P2SF{Lzd26PT'
            '%Warc!C%vLE=9o%jB6S5oy^b%zt}1)_;aK&N^zvJ;NQA)ck?-|y`OHTapJ*6`qvn8OO+W=E=pi33J6be1K%Usb4l16&jfNZ9&&Wg'
            'zX!j1Pq-hN_XqTPG!K7{Ra8-O7Koiq@`@UxN_MDGl3yIak2DnSDl@-s1qu=|X8zKUm!(kS7o2d2JIANYU)`!y9F2M@q`%N2QsZ%r'
            '<|0RP7?%dMl-$f-h+bq<E^7$?gnpJB*qjzuw`I|));W<k5i0Hj9r#{6^x{s?>|*pXBeikW?Dl|Unm3>b5v@yTU~|Om1`7KBMi(+V'
            'jkBdXn)_t#ADe9+WsWPjim&12*vUHf0XOG`iXZIbodJG`ANBELyo;aUr}!Cuj$h!H_*IkvZnY!tQC&os3p<ayex20ae)<eU;3Ykp'
            'PX=B)-n4`^?MBv(i;Oqp&Tiv(Z7cWZ2>rD+J&eW8cN%#+HL=%6T#aD_8k{&w2EVs_Zc@NJ*3v;k1P)M8?U9{qDcU;+wxOwEG+zGq'
            'lFJyH{tvct?bH_r000'
        )
        assert isinstance(_MODEL_, _pydsdl_.DelimitedType)

    def __repr__(self) -> str:
        return 'uavcan.pnp.cluster.AppendEntries.1.0()'


    _FIXED_PORT_ID_ = 390
    _MODEL_: _pydsdl_.ServiceType = _restore_constant_(
        'ABzY8i?xJe0{`t>TZ|h=c5RMEGgRx<vSeA-!!FCR%#k^?B)?>PowclyVx_G|B>9m94&7weO!cVQ&F#mG#=rvJk1VW!KnR!t_LH9*'
        'BuMz_zx?j^A_x{pkOX-eNj8s<1vWqe<ld@V#b%Qu%f==M5DU;$kzLPQ=bU@1tN6+M@BZ0ami*Uyvb*J{e%NTHJPEuo_}FWOywPmO'
        'oo<{486Wg^-{#3i(B^lxx_t22VCj2<?+$9cz0HJwC+BI_%<y|*_4cmtFz7%Pf3oC4Gl(Ld$RfA1ByVSVQfh2xGx9pnRW0{6+FsP?'
        'M%_j`%+rh~jf>qbkNnF~mIOR)+)|wmde!CzPtqWcu-(P?DF4~Ot+>|r2j7EXH@yt%wDOFngAbvTZDwjp4SGAT1U&S|!?K&cmw9S}'
        '+g0x-IOkvkN*sJQN`tkC`&XlkukmDZj=P(!AZvy^TFb=1Wzcxr1M78SAFTI8@9<6C5LRnkf@jz85zNT?t--B9?@%+%yvX+wzu3^H'
        'c}wi?&4ZyjgWi18kK2QuHGnUVs&2&z!6^5%%fu;B6HBVj-fqG-nqj=wl$FJEqP|Tvr&w*DsTM>&zxUAf_J-W^d4j-#X+pJL?G|6<'
        '3Cm)Z3C?bLs~PKhUHE1-P8h$}4ZX<AU{M<r)9D@CW*L*j+Zyy9d(VS!;hT4)eJ<j+W#ICVcX*_MyN6od-#an`eTciQfjA%zYG8@O'
        '0H!ZD?>t%cYfe*qyLaeHaF6@j%|omddajzDd%FNuU9TNvTLaetM6|+m&^xVdHbxGZFDri@^!B_JWU9y8@R9oJ?P$i`L62?MNV?T&'
        '#bE%*J9v$EVptKJ&kdNPm&Hj@2-+e5ehIJl$SvOGSunfYT=OoBU93X6{nzs_^pdS|A!uvE3v)jBok7j5_R|*3e7@NUqJjGfX1sft'
        'Swwc_p@*%y6)bA?-8o8kU^>@#=jroKOn3C%1^RxG(keaQMW1cerMnx`#lE|TKJUeJci-Jd<@VF}4%I(^>8`%}2t7ZD>At>uh{`=m'
        '-yg>Gk-qyFrhEJD5qkbOjqfO?NBZtDOb_+l<Cr>q_XMVU`tB1{{z**d`!1vYpThJ+-#v-x(Z2gMrjPaAQ`F8gm>%f6r)gZz(tK*v'
        '-V&xe`|cSU=X02z>AQ7IYkhYa)6;#of$6Ef`#h#6`|epxS>HW}=@WhTJf_F{?h7=I7im5(VS2dlzD(nJh3s&F=JzU%>ouC^>zLYo'
        '_ggf+H!xl3yT3&9{x*&CO`8APm|p0+AJBLO^?Q%%e~RfRefI~H{*cnoDg6<pKcVysN`J1>Yt;&6j_6EHXD;Z>+dA`s&Ip~kr!$}G'
        '%nx+thdT4Q&iqJcexfs9=*-V4lY@f+b@3wU7wNke5(UI*R~`l6N1K6<3e|X5ep<e|!s1m>sUT%u7{+Z$<JZ~8Jc(Jb%JS%L6mOPw'
        'YAm1oNIoNQTaBwLQ=<9hK4Pchv~nq4?_j}$H(OgOM)>YP{I&Rt6x^xL!4<(Exj(qy+t*x0wQP3dB*ST4?;U8Sah|j}JP3KS>w&ZE'
        'En*S|twC?sO^9yp-NbJ{1Iej858hM67=z4pgF(-}wAB?}xB_xE0FRTmK;9tWSpzYF{>EVeXzPNSHq^(7L)>w7rE#utwt-qX$k1~i'
        'Yzi-h5hUnzQWZ=M?t|g~c!jS95eIWKtP2a!u<wAA0Qm|!d53{H0-s5vFjy3rFhoMo2#X`>Omg^?gj+$h#<B!f8Yj;}ZwvgE{T|jz'
        'Sr~7k^ATRe&Yi!&U<|Ofo8DGRjiVES#U9sB8}@|5O1r!rtOg1UvUn$kMuKQHZVbe)ix1^eijPE_)>O*&P0#mXSX0^#PdlnYSJ66c'
        'K_u5zr3Y>mV2}VNQuv>3E83NkXje$I=eH5<MH1}=678KN+VdpZJ4&KmDT%g2qV14qJ0#i;iMB(c?T~0YB-##%wnL)rkZ3z4(RN6*'
        '9TIJaMB5?Jc1W}x5^aY>+ab|*NVFXiZHGkLA<=e7v>g&{heX>U(RN6*9TIJaMB5?Jc1W}x5^aY>+ab|*NVFXiZKovK4vDryqV14q'
        'J0#i;iMB(c?T~0YB-##%wnL)rkZ3z3+75}fL!#}FXgeg@4vDryqV14qJ6g0IE!vJ2ZAXi?qea`%qU~tWcC=_aTC^Q4+Kv`&M~k+j'
        'McdJ$?P$?<v}im1T>O|aTB#RN7)Ym&T~{J8L#0uax%eAo*bU)|KM}vW?o}*H{An)!?!Nf@>*628Ki0%QiGLP975^gsRs36T2Sm9b'
        'h!p1zdi!LgJE>gaXQ)!YeIw%RW^_|)RH0kOWhD?T7!B$n%9IE3E$EOOBn7<fI7)ex<~ZcFI0-V*X|S8HBS<+*ifSX<nAq`2$?<vS'
        '1!20K;QXh_6-DULOL2tmA(|PEVxWxCD2Oud4j<gwdJ4vrAJ#V@w_W+7v@wvj^*Jc)R-~vg5H+SmO^ee*MWl13h;*JrZ6}G^9EqA;'
        'ibNMk)aFUl=1QWrpG0jRiP~NgwLK(iyGhh+6182WNOX}zZGl8>CyClTiP{blwK)>CN+}X$Bx;OAjghD^5;aDm#z@o{i5eqOV<c*f'
        'M2(TCF%mUKqQ*$nSSb=^Bx;OAjghD^5;aDm#z@o{i5eqOV<c*fM2(TCF%mUKqQ*$n7>ODqQDY=(j6{u*s4)^XMxw?@)EJ2xBT-`{'
        'YK%mUk*F~(YD|k7)1t<-s4*>SOp6-RqQ<nSF)eCLiyG6S#<Zw0Eow}Q8q=c2w5TyHYLICOpQlKMA&_DC5M(HOdaLB=7fK%9A~GzL'
        'Jp4S7VS&hCm&mYK^6*t6gGFT6OJrCeG8`^>c$>&DPh@zU$Z&|ru%F0a6B%}v$Z(v<aD>QksN~`I5E-gOhIt}`MPzt}$Z(R#@FbDp'
        'IFaFTBEw-K!@-h=-%Dh$i42QGhIt}Gg~;$Ck>Na%;VhA%L1d^C8O{(HYD9+9M21sDhLa^SXb=B3k>LW7p+;mlLS(2C8HPlLA(3H7'
        'WEc_|hD3&;Cc{vZVW`P4)MOZHG7L2thMEjRO@^T+!%&l9sL3$YWEg5P3^f^snhZlthM^_{WXL<HkoOxxd_#!;_k<Atp}fNg$T0dE'
        'p;Dz3Dpg9MlHUJWrBG>+$WSFR>@JaEp%g0ZEbafQL<Wn<u)h>4Rfr6Shz$FP3{@h-9FgHDk>SzO{%<#tVS&g{DTPYMi3~@G42Mel'
        'zdb~TDv@EH$Y2o}mWT|ei40GdLZuT#hNDD=$A}Dvhztja4Eu--yNL`{BEwE1!yJ*}H6p_WBE!o>h8Kwp=ZOqwOQDiQWO$p%aDm8B'
        'BQhKzGE|8SBO=3y$S@)@jED>)O@@&s!$^~1q{%SSWEg2Oj5HZWnhYaNhLI-2NRwft$uQDn7-=$$G#N&k3?og3QOP@eLx^t(p$Jg`'
        'h<ritYi_0Yh(3&2#nVeV)tWpTI_*~Q3{kyjowbFYvB52FX7Pk&VsHJ}EiYQ*4?4tIXx>%FFcoM$gf=CTt%pRiHHBr%pxH8bwhW>z'
        'gK29D)t14vWsq$dY+F<4whX>4gK*1W+%hP)rf_Z<q+15-mO;B^@NOBzTL$x%LA_;gZyDrU2K$ylzh&@m83tH}1D0WdWq4p2CRm0G'
        'mSKZs_+U*j!ZMt&3@a?d3(GLWGTg8XJ1oNw%P_<;9I*^bEW;DaFvT)lu?$-*!xzgi#xk6-3~MaI8*9uQOL9lW8C3w|=MNKfPahMa'
        'ft0kG&|8+0V65VIw#n@#>hCe%>{YorEwkg}LVW5_`2*^keFR4NOa<fSWsUq!Nv?SdT_rG9akNLwv&U6#7lBdsc}(RFYxy;Aq^lVC'
        'K4E%zQsqt%7^?`Vr&R7Bfl-e0Y179kQ}-E_JEa45^FpVJ0Iiw!mQ?PLmS*#|x{3g;)6AAlyA3nP=T+`G0%H~9fpaSN41uwV0rm?j'
        '_auQ)_WzQ~Jx*Yhws^(N?1CA|tH$oH8T-7ha*O&15=Zrh%2f!ARrgy2#wvpLO_jT#!B}-aFTCmH>V@Y(JomvLfnL5JCuzpo>J@1>'
        ')F&`m(BTZP4_t{ub-2^^BG%#zZ|vk5_nDWzX4{Ny%KB4P-(WTU9#>x!SYl^b?L33tyD7f5jrhGx-R_W2=$;P?qKqdSUO3VFl5JmZ'
        'tTpOvE!g1dRBEa`G<ml15=(hIj{LMP3vE7NcKF8k(#7knm8UFFlfknq9Ciu=(jz@nY!&8(W$07GR<ES-tu%Dzb>ciyZ=|vPAY+>W'
        'o_Tq9Rc9Vdd2?*gEQT@RD{FaK37)RzP@0CR-)s9pN@tTk3*$9;Dte?>y@b`gC>x)6otSw~0~Y-F%H=B;-+kv!^V-$x&CBmxzI5m6'
        'jqA-jSFc^Z@$Mab-(UR=HJuN^3-?aw+ZX&^H{mIs>P}ofs@{?o^g`V;)Y-L~cy0VPh38i&56^p*^8<_r5P9o=xr03aLk;!f2eXFy'
        '!C7cTkJkQW1BFfy$%9ND^0ryuI0u_XzAQk;4=fEn=5;$OoPFX7bUJw6=}#kyAn)@8x<bUmGUDPXus{<Jt_~c4kxh+ii9HYCqS7gR'
        's1=9Dmf5)_Tb|EC2?bX#P4f;%ka?M$&pYyx)3}W|;$vKSh$ZZ+&eGV_N%*rVKI+72Cd=dD2OjCRy)d+~PP7FN@y1ev-Ok$rW-h#q'
        '0B{TNj=RtxObJW?ux=;Z%j9`-9tD8xj^t1ndw!jHVJ6~yO<*~sMyIQ;LCKjc>to)AeWL|!=V`cApUq~nec@nP&LlwH;9%}L^qDac'
        'tijaO*>x(9oufFLSQSrl6Q<^E*=;XR$A(Igfq<MWfXOgGd&k2ogJ!*8@R5=Z;37c0gQH1P=tmwEh2EAD0B+!Bj?fbTUfhAz^sx;&'
        'KMZ794LDe5fbI{$Q0;b{$Q78nv(;dCR2A8X!oV7Q%tJ2$A+=MmaOk6Xz#@3OrB<{9Y7;1S;1HE<8o<!?FEsfe|5M2KDlZyl(s|w)'
        'aZH>O%i?8mUc4?|S^sk=Cf->8TS(Ub3jh2J|NJ}r+3u`w-3NEF&f!n*=nJo&E#0Uro%nqUYz_}t*4H}HyEFY1YQx&9iw26{h@{Ai'
        '+ML?6i&9!RTg>npAJ{V6<RB*r_w&dHWz|K%fv64@^>MwxKeWL$$l3vFLR)rCw<Y+!w!p<s?ddjW9B<0@uV&1T0ayrLuiFi`G$u6s'
        'BH+%fp#clHM713dL1Yc-jmlGmp{7trIua!PmXXJ961PF?RYy~Yued-UfC17UDxjCzQcX1M%X+fLfK-tq9V5RmRLM>sY=vqtCI(D5'
        'iNV1j2SMXfZ;g&;eY~_HcYVY%1Ay^L7kxURW@_4AI|0_tTv&y<RWC?jMt%UYk=c`i^<`MBqrS*{JE<7YNs`z;c{O6UxtD;HLMtF('
        '@8Ufgb-NY^cF8n%(afxN`Cg`Ui>?|kon);owi58QnB9ohyd;)p{gqfm?1uCjpaq$_&of472BFoo*GQDtK*)Na6@iyPfRc&vkjc<;'
        'vJh<Ggfrk#$|z=(*1)xqhxn{U(@jwt@zzudfgWF~vrTk2jBju#B#-XLEg56ty;VEPJ1w5n>6Q`Q4y%vdcAP*A(v6j)($G{YTZ84t'
        'D`P3T1oTN#5|KbH<4q7HN!)=oPH{QgHa4*&>6~!D53i5MgY(sK+!S-Nl!vQeo!bHGNilv<GeE;=8);n6pdZ~^#}ys>gaYZ58&iXV'
        '@z^?Y#=5N-uVML9gHI!`3;rNeSF7-j16oh5UZ<;KG2m=OE^X{0zmo&t{kkn<1aOf0i6obt#FYD<V8d9CZTo$J%#X&@LRpFx_&8Hn'
        'vL~seBA&WjIl<d^<uYb7!ROKa56Sodqn*vjCX*?wC<LH_M$cyTVxOMxr@GG6g%T~Y*jsG^f;##@eE~@Ok|(x;8<7dT34}pKs~B6s'
        'b_JIS7fpvyYq<x@BURDR(ae-?%8e&XPTfYQE=O8d5!|Z05+~y-T&akoYI|xTY2KCh@*=+GVW_SE4a{jHqEMwkX5(~>zCyTB1UB(t'
        '6PA`Q#}Ro6jobhOk$5u`b$Oj{Y*B?QXsqK!GK7@#2lfIf+S-jk$iusm4FEgYqq_g7ba;b{ppC9LPt~%5K~{scJTcg#63?a*+c9>O'
        'YGc5D1>_rs2)0l@3Am3k5M|*Ogqxv1F<P_0op?jd3xYAVDT8WUQ&Qav!fjizGFT9X0kIfLZE+=I2{L=^VP1!I0sS|nQ-Nk{NlRhi'
        '3|*(7BOy2iE~8=4&LC7P5rIdIle_XtCcwAOVg$ivK>oeRBU^4Xy*!IMsB_A>XBqEwGquf>j-S>SqD7QLt^<~WKUBgkZ%9ea+63Il'
        'v4ikvCu|C19FDDH7`ln8k0R)yx5IHhn;Kc0FfQ&EJUwoRd<xI7qiCWDdzLa5hR{l2&w;;h(V@fGMXdloW9fmmaZ|wdEC?sIhe2wq'
        '=*FkY7%8eCrr0aqPu^~_1bmKeJeA@f&yY-TA9s~F+PZHqlsmHt%r8qQF3Sca6(Kx^@n>pBl#S7(YpE!-G+dG=4Ha^7W5=alc#x6w'
        'aB9+fgAV}E@(>^=5r#_*AY1lf3`n*mK*cSzV`p5m!?EF11YM?ML+x5fqj2+<YQY&h9<{HdHzfrzfIcp!On4}#;AZ4+S%PRBZLRT$'
        'Cm<rlu$<<+&2_?6E_ZtMqLq{_H@ytj6oz2aHFSy`$Vd>Z5|N2JI6TB~F;@4si`MJJtn_XnrY@Mmo{AYrrSh)tW#hPgMvs$DRlxRk'
        'L&sHGMmjM>)3MSl9D<y%Jt0Np8MMESaC5FkCsAHrVjLbWocgVmxydcOWY!L=7BqN6y?oJnxr8qr!1p!Sty$4IZFA+OXe?%N3%#T='
        'Ws(=2HZ3}+HBy)$YELX+4PO9I*cicFJb%e-p|%a%#=h`19i>ck>J>p^qvZ|qYh1py^mHVF;Q>}w??&()UKk=Bq?1wWH0kxAm}<)h'
        '&4_Yb{w1}p>T6r`GQb~FrU4FFD*h_I#n>(w1xnpOJ(2C?3I1Y$7DX*R;!bZ03w6!=CKN>uyOA|6-;u!j!<?v)+)|8pferg&F)pO*'
        '#GA@>!2ZXd>;R*E`HBUH2gYsz^3WuHFpe@n0p$z0Wj5iFq^;Cs!a|6nrqqz-uV!ia1*`GhW&=)f7%Y<lHZo5K_Y%a4B<OXfZDVu_'
        '`eQOo2{|?ZVE|fFx))T<i?C{jPK9?B5XG;q0+bB)A)rE!g!trvWTEono7fq>?7%na%OK12t=S2{wi^8n?A8I4;a9lU{E!!s|F4yQ'
        'sEg6!$JgPDa#3|u_a+p2(-bOJpL{a)>k?J{CKS3kv-;$dZK{6+g+3}(S2r_CPp<B;ELBB_^xBci%sQn<>i9=E;(&Nm{kHU&SQh8S'
        'E8-3Heh**m{SUkgT>md9X5RU&Tl1FHTWresC>va}cJvN6efmLn(iG~)yXCtDOq^Q3f@Ao)7Yo?L#e(%a<}70UeaM1oSEueFpbf8s'
        '39TJyLVa?ZN?S_X<3l#%q5P5PzNVHkn#>|~ZWn&Zw)7A`LsyLq#;f+wzX&e<UiyjN?ziF?#4wuteect5Mb*Bqjt5DozUohk6>`=E'
        'EbqFHe`5R-%zt%=i25&DroN^uR17hnf<jNtBv}of)Jhy%Z^5k1f+=gDA%2l2T3>-`*FLGNU&g-v_n30_0ZjR%@&Kj`E3=sbkYis)'
        'gPG{BB3Q}kPN9AMH_<Hnd)34cNS2@__<c0|@8O?6#6N#vmf+g=D-X8__esj~R^z_`4)5}~=0X4f'
    )
    assert isinstance(_MODEL_, _pydsdl_.ServiceType)
