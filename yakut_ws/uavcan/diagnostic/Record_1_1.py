# AUTOGENERATED, DO NOT EDIT.
#
# Source file:
# /home/pi/CyphalDemo/public_regulated_data_types/uavcan/diagnostic/8184.Record.1.1.dsdl
#
# Generated at:  2022-05-18 08:59:56.287499 UTC
# Is deprecated: no
# Fixed port ID: 8184
# Full name:     uavcan.diagnostic.Record
# Version:       1.1
#
# pylint: skip-file
# mypy: warn_unused_ignores=False

from __future__ import annotations

from typing import Any as _Issue110_
import numpy as _np_
from numpy.typing import NDArray as _NDArray_
import pydsdl as _pydsdl_
import uavcan.diagnostic
import uavcan.time


def _restore_constant_(encoded_string: str) -> object:
    import pickle, gzip, base64
    return pickle.loads(gzip.decompress(base64.b85decode(encoded_string)))


# noinspection PyUnresolvedReferences, PyPep8, PyPep8Naming, SpellCheckingInspection, DuplicatedCode
class Record_1_1:
    """
    Generated property settings use relaxed type signatures, accepting a large variety of
    possible representations of the value, which are automatically converted to a well-defined
    internal representation. When accessing a property, this strict well-defined internal
    representation is always returned. The implicit strictification enables more precise static
    type analysis.

    The value returned by the __repr__() method may be invariant to some of the field values,
    and its format is not guaranteed to be stable. Therefore, the returned string representation
    can be used only for displaying purposes; any kind of automation build on top of that will
    be fragile and prone to mismaintenance.
    """
    def __init__(self,
                 timestamp: None | uavcan.time.SynchronizedTimestamp_1_0 = None,
                 severity:  None | uavcan.diagnostic.Severity_1_0 = None,
                 text:      None | _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str = None) -> None:
        """
        uavcan.diagnostic.Record.1.1
        Raises ValueError if any of the primitive values are outside the permitted range, regardless of the cast mode.
        :param timestamp: uavcan.time.SynchronizedTimestamp.1.0 timestamp
        :param severity:  uavcan.diagnostic.Severity.1.0 severity
        :param text:      saturated uint8[<=255] text
        """
        self._timestamp: uavcan.time.SynchronizedTimestamp_1_0
        self._severity:  uavcan.diagnostic.Severity_1_0
        self._text:      _NDArray_[_np_.uint8]

        if timestamp is None:
            self.timestamp = uavcan.time.SynchronizedTimestamp_1_0()
        elif isinstance(timestamp, uavcan.time.SynchronizedTimestamp_1_0):
            self.timestamp = timestamp
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 '
                             f'got {type(timestamp).__name__}')

        if severity is None:
            self.severity = uavcan.diagnostic.Severity_1_0()
        elif isinstance(severity, uavcan.diagnostic.Severity_1_0):
            self.severity = severity
        else:
            raise ValueError(f'severity: expected uavcan.diagnostic.Severity_1_0 '
                             f'got {type(severity).__name__}')

        if text is None:
            self.text = _np_.array([], _np_.uint8)
        else:
            text = text.encode() if isinstance(text, str) else text  # Implicit string encoding
            if isinstance(text, (bytes, bytearray)) and len(text) <= 255:
                # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
                # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
                self._text = _np_.frombuffer(text, _np_.uint8)  # type: ignore
            elif isinstance(text, _np_.ndarray) and text.dtype == _np_.uint8 and text.ndim == 1 and text.size <= 255:  # type: ignore
                # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
                self._text = text
            else:
                # Last resort, slow construction of a new array. New memory may be allocated.
                text = _np_.array(text, _np_.uint8).flatten()
                if not text.size <= 255:  # Length cannot be checked before casting and flattening
                    raise ValueError(f'text: invalid array length: not {text.size} <= 255')
                self._text = text
            assert isinstance(self._text, _np_.ndarray)
            assert self._text.dtype == _np_.uint8  # type: ignore
            assert self._text.ndim == 1
            assert len(self._text) <= 255

    @property
    def timestamp(self) -> uavcan.time.SynchronizedTimestamp_1_0:
        """
        uavcan.time.SynchronizedTimestamp.1.0 timestamp
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, x: uavcan.time.SynchronizedTimestamp_1_0) -> None:
        if isinstance(x, uavcan.time.SynchronizedTimestamp_1_0):
            self._timestamp = x
        else:
            raise ValueError(f'timestamp: expected uavcan.time.SynchronizedTimestamp_1_0 got {type(x).__name__}')

    @property
    def severity(self) -> uavcan.diagnostic.Severity_1_0:
        """
        uavcan.diagnostic.Severity.1.0 severity
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._severity

    @severity.setter
    def severity(self, x: uavcan.diagnostic.Severity_1_0) -> None:
        if isinstance(x, uavcan.diagnostic.Severity_1_0):
            self._severity = x
        else:
            raise ValueError(f'severity: expected uavcan.diagnostic.Severity_1_0 got {type(x).__name__}')

    @property
    def text(self) -> _NDArray_[_np_.uint8]:
        """
        saturated uint8[<=255] text
        DSDL does not support strings natively yet. To interpret this array as a string,
        use tobytes() to convert the NumPy array to bytes, and then decode() to convert bytes to string:
        .text.tobytes().decode()
        When assigning a string to this property, no manual conversion is necessary (it will happen automatically).
        The setter raises ValueError if the supplied value exceeds the valid range or otherwise inapplicable.
        """
        return self._text

    @text.setter
    def text(self, x: _NDArray_[_np_.uint8] | list[int] | memoryview | bytes | bytearray | str) -> None:
        x = x.encode() if isinstance(x, str) else x  # Implicit string encoding
        if isinstance(x, (bytes, bytearray)) and len(x) <= 255:
            # Fast zero-copy initialization from buffer. Necessary when dealing with images, point clouds, etc.
            # Mutability will be inherited; e.g., bytes - immutable, bytearray - mutable.
            self._text = _np_.frombuffer(x, _np_.uint8)  # type: ignore
        elif isinstance(x, _np_.ndarray) and x.dtype == _np_.uint8 and x.ndim == 1 and x.size <= 255:  # type: ignore
            # Fast binding if the source array has the same type and dimensionality. Beware of the shared reference.
            self._text = x
        else:
            # Last resort, slow construction of a new array. New memory may be allocated.
            x = _np_.array(x, _np_.uint8).flatten()
            if not x.size <= 255:  # Length cannot be checked before casting and flattening
                raise ValueError(f'text: invalid array length: not {x.size} <= 255')
            self._text = x
        assert isinstance(self._text, _np_.ndarray)
        assert self._text.dtype == _np_.uint8  # type: ignore
        assert self._text.ndim == 1
        assert len(self._text) <= 255

    # noinspection PyProtectedMember
    def _serialize_(self, _ser_: _Issue110_) -> None:
        assert _ser_.current_bit_length % 8 == 0, 'Serializer is not aligned'
        _base_offset_ = _ser_.current_bit_length
        _ser_.pad_to_alignment(8)
        self.timestamp._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        _ser_.pad_to_alignment(8)
        self.severity._serialize_(_ser_)
        assert _ser_.current_bit_length % 8 == 0, 'Nested object alignment error'
        # Variable-length array: length field byte-aligned: True; all elements byte-aligned: True.
        assert len(self.text) <= 255, 'self.text: saturated uint8[<=255]'
        _ser_.add_aligned_u8(len(self.text))
        _ser_.add_aligned_array_of_standard_bit_length_primitives(self.text)
        _ser_.pad_to_alignment(8)
        assert 72 <= (_ser_.current_bit_length - _base_offset_) <= 2112, \
            'Bad serialization of uavcan.diagnostic.Record.1.1'

    # noinspection PyProtectedMember
    @staticmethod
    def _deserialize_(_des_: _Issue110_) -> Record_1_1:
        assert _des_.consumed_bit_length % 8 == 0, 'Deserializer is not aligned'
        _base_offset_ = _des_.consumed_bit_length
        # Temporary _f0_ holds the value of "timestamp"
        _des_.pad_to_alignment(8)
        _f0_ = uavcan.time.SynchronizedTimestamp_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f1_ holds the value of "severity"
        _des_.pad_to_alignment(8)
        _f1_ = uavcan.diagnostic.Severity_1_0._deserialize_(_des_)
        assert _des_.consumed_bit_length % 8 == 0, 'Nested object alignment error'
        # Temporary _f2_ holds the value of "text"
        # Length field byte-aligned: True; all elements byte-aligned: True.
        _len0_ = _des_.fetch_aligned_u8()
        assert _len0_ >= 0
        if _len0_ > 255:
            raise _des_.FormatError(f'Variable array length prefix {_len0_} > 255')
        _f2_ = _des_.fetch_aligned_array_of_standard_bit_length_primitives(_np_.uint8, _len0_)
        assert len(_f2_) <= 255, 'saturated uint8[<=255]'
        self = Record_1_1(
            timestamp=_f0_,
            severity=_f1_,
            text=_f2_)
        _des_.pad_to_alignment(8)
        assert 72 <= (_des_.consumed_bit_length - _base_offset_) <= 2112, \
            'Bad deserialization of uavcan.diagnostic.Record.1.1'
        assert isinstance(self, Record_1_1)
        return self

    def __repr__(self) -> str:
        _o_0_ = ', '.join([
            'timestamp=%s' % self.timestamp,
            'severity=%s' % self.severity,
            'text=%s' % repr(bytes(self.text))[1:],
        ])
        return f'uavcan.diagnostic.Record.1.1({_o_0_})'

    _FIXED_PORT_ID_ = 8184
    _EXTENT_BYTES_ = 300

    _MODEL_: _pydsdl_.DelimitedType = _restore_constant_(
        'ABzY8jJ1Sf0{^vHO>Er86_)&`(fTir{1-ckCr#r>jl|fFf7JZ6c4Rwt8LeE|NsIvLhD(k#BXdcHLrU5d0g^)t8z5Q&VS$`l6zCy`'
        '0==d{fnEdjR1`&X>7nSMK@UCj<Q|Ijz2PHwwUX>OXbhNdc7ES`^Zvfk``do@mq&-pzwB7l^|a?(EiGc@`08D!?F*~rhMg$XDiKAt'
        '`=anw2b$iEZX}8ii-`}4_logsM@t2PhzmKC?Y^GGshgy+SUY8VD{wln#o^RhcAdcTl(QIwI#I4QFWfNpij1|EMXXgA;65X-Q~Sfh'
        '9=3;nTzpVuJ6leY#HyVpLKknrrkikF&nmL*mzD6n9vh98=Oj)mLEhv@*(n>@6U0@bI>Nf%4O|(AfqEC@gbtlJov4tz<R0K;2sx4a'
        ';B<L_mLJ}Xk0?fEsb%0}?6p9v#XxvhgG4Nfc&&1Fw%RIb`65_MWMNMOm#(9eRwwj;%O|pf*Q$+hnKc7rvp9sR`B5=nWcypdW8gWl'
        '*T2!7v<;%|>?k)5HRw119dB!Sp<CSi=a!+N8&dEf?X*SA!v)?qOY=lJ375{Y;E|)X@VHiiE4U6jf;%xB5j%00ci?A`a23FOGc&Oo'
        'xGD9+reUlWVR&3w!kRR*P{F+IXfeT+=AKwkpc5X6c*=<)U%5^KcW!aq#!cfG_o<iQNvReMxG3HhJQnYya5u1gAr3pe-F1C^W;5Oa'
        '#zZ{HwGd_!7+WlK1cIty5qjfg1+p1dlsUZtQUG(yj-LwTG6{JgmQhXcS@6S^lD~TV%-JbW313kj@F`pecznLm;Czao`oWpAYc&hg'
        'opzWe{M4!GGrTLDSWog5sa%Oe5!_tTwfF^o_O#ivZ!Pehg6+h7B}{z}4uTUnPr>h8p|uk$zgw~ZhQL*#Yi>bpunf4x8#x1~CNfMl'
        '&N9ctu$RIX+=0_zW3j40UqJ$P%-vXNrL9t!86Rvxxl=P2ntVJ66Mp&P1P4n9K$kI`=Q=SMMH->L&hd5^oD@%toUR`_=8oZ_AO={5'
        '@f+1u@eZ=T2$QvRd>?NZ&27;aQ)YU3#DeH4sw1GIw9%x#2QZ4K6Eq9dL5!mTTnq;#YO4T87|Ym97@(UZwcp9Z@=0nPx2NUPa>5=$'
        'f0C1>>x{hCw3~BpGz)2E$KMojIC!+NH@G*{#;qV+39JHQp<$@V9;<?aSdGBoFqo|g32ffjr{h=r$mg?B5ZT3E4da)o4ddDHi2^y('
        '?X)ejvA#IiYIn=Xic(C;V{%%aN+F<l0uBXt5?*m9+tXT5tHNvHMYWVyG_!pz9j37>V89ox$boQ?jUe$=yU0ebLBL<VhP@v`cp82d'
        '0*4GSd~b<Vku_$z5!}^9(Fu#}Xq2|Waa*xiOnp4B7hyq&9c5sJ^{A^Ndwj#-YMr!BSg5Qb!EiR#l8y$Z(EVHFpv4`ygg-P(hsP5*'
        'o`BW@{vXB=4N%Ewx8T$cIBc>K#<!-7N9evY&7GM;!BP^r#=~HP&`--4U_wCe9QYyCq68lUt%e;4a2_3u_Sz0%Cx}i}6gED%40FPG'
        'N=L#~3#!k~Awk>{7RKVX4=Ord*-0;SgV4#~?;_jvvPxbxzpsnhh_kJ&Fe);>*(SQ%X@_t>pw(HpFA9ot;Ehfa#{DVWmEit`bh5qI'
        '91mmTx=C^YN1LhdL--#YmCygQ7`LZ$-G)RSl{*wROWPo4M+KPHpy8}yV+2zhSPO1y597L_+}=WTE7C2wy^VfvM>?F_JE(tz`Wewt'
        '>Te+3k=r|I{w|~}w|67mmfL%1{$8XzbNeA0--mR2Za+->j3IqExA!A`D7OzF-ILn~k?zXvLr5FBeVEoiLgyZ#bB@wJkJ5RMAw8Pg'
        'k0U*j+sBYTlG_~V;oN=#>7m^I2GWDM{Up)@x&2L~`*Zs#q+_{#ocMYg>Au_^C;ldo?#=CQ5ueW>-JRQ$#P1ZzYZ2eiA|1``6U6^X'
        'q$9a~isX2X^l_TxIfHa-Zl5K&&XInnNxpBF_ioeu+b<A(k?2cAzeDu9M9&kwLi8q4NpzLyZK59${g~({L_a0^8PU&)-Yw}Y8>YtL'
        'sxe+QrmM!4s&TVw$f~hgHEvgpkE+JURpXPY@oClgtZIB-HSSU)h3XD60^|`4?bO%Czz!K_H0jlwR`!dzsLT+3L5r%bD!#1?Z4m4r'
        'M0Q@_?_$1E3s50Yl~opJy`3m;hQYGvYO|?Wg@jX;Z!1!iM?qwTv;o^g4TR-b7~X<H#c_qnt923FS4|&TU*liL0!k&_dzI0B$#^Ry'
        '<8xIS-d-kDY2EyMxGY;W?Z$m*_#6s^MGX6<4m@G%53ChLEI8IbX1VTV2<)7yw-`?Y)j<iNGMK1?^dyGx28R6g%dxj_{RXQoZsdiF'
        '>jV&V1LbOyE0T4*LpF#-qpE}3!c><{DDKSwcf4hV84g5(V|-B-)@c$!1qqoO>N=FWBU~tVl<pwgK5T)Vke6apyK3PJH)-J65QkL<'
        'xT<+TrUVouc)b<#FZ41Mly4==xPvIu8cGiZ)}R<G%J&;kewk`OOW_#}uGtD0>tBc~uwc_^Wa=Z>f80|V%1B796UMks-q$p4%wL$f'
        'gub#oyM}4V*Y!b!7fh)T29UzN)Tqrv&cg_GYJ8(h6)0A7)qHR_2Q&>B5*M44S9)aWW)`G9`4Z(n`Eq}m_9d9Vc<JTWUP0#lnt4-N'
        'BEya{hbM6e3Kd$0Ayzh4V{<W4-K1hk5P^d}5sE^)iwMU_{bU`>Cm(?2ZC9I@=aA#%6%iN%R{_{ir_##6b@R$MAXt12oS%9C&UZBD'
        'Zd@%*CA~lI#__*i=AU~2=11PRFyFk|G`8}?nw2szn|ik$pddaV3k)2<(TWoXID&PpLACmRGE{zD3n7C0%5eHYto_pb{M@{;oed<2'
        ';t&q&l+24bhPd?gvVP_PSZ6cySHXBLyt<kG@!1D3^;#(aJVWL~6#dl&ar_krk~7J(PKdJ)qW=r8UYfsw61>-hSh7HGErt^h5-5}l'
        'Ac3o5H|=O+^%RXf(J@a70D2&yC%{x<-UkpRZ7$B2mf>6v*viYu_uu4S<v--#<-g^><bUOVmKY@crET~b!_Qv)JdU3u_?f`ZQ}{WJ'
        'pA+y&<&`_~YEyns&W_8boRin&_vO62o;7*}Ns;ZVN|LqUQ{F_NIc`Ek5482<s>^`#rK*r`%C|~s-j;3+lVsiU`@qpw07o)HOeEj2'
        'nT+AT{?Z6&>i_~89zZ~h5D+5-#0C%$BLu_<0kHuD#0UW~LO_fV5F-S{2mvudKx_a3F+xC$5D+5-#0UW~LO_fV5F-S{2mvudK#UL&'
        'BLu_<0Wm^Aj1Ukb1jGmdF+xC$5D+5-#0UW~LO_fV5F0>1j1Ukb1jGmdF+xC$5D+5-#0UW~LO_fV5F-S{2mvudK#UL&BLu_<0kJ%l'
        'f22kQ1DLMMWh)z6Q)XvJH+l1pW2akWhhBG}7kbKvf(zKY_N{q$OO$maJ%abb1uMhFZGh~fE!T-07df!M$R4g<6igws;kswcx{aN|'
        '$qvkf0lq~A8$LeZY54XKivVBs*SHKrm+9Z?&^*Sfc@c?3ZT6CJt9)npV!-`yFXMVcGM>FVvex&=m*6g%5Q#K-=<E=?$27XFZHZV-'
        '@TMe%LyjF*qiJ%o-<|A#;;f?LEfFQ$F+H(qM4{FSE^d+w^JIi8@u^mex*(~n0&8OmmVc55mokWX^3O}Z#rXG=I{wYxJ+>|aF1-lD'
        '+5YL1)2HdLE)e`q4hFy5Rq&H3ME<E*I38M*k*W@eh#dTI(cmsj4^Z*|DD0YCp2i>ypr8g7TBrh*^a)>s1WpgBSU~9n@}~-WpyK|)'
        'weDN`B?xAIEd2^vXhr{z`Cc8Zry*KTqbZn+Uz&kMrIDP6f%EkM%pXqIcQ5_Co___5>OAXTP#!SQUz(QO32^zL5+)ynE5_UX>KDKC'
        'JNVSsy!3mtg^?CqDg=XK_U+N^V9TSw@5L<%w+>{`*ZIADeFMGrdmvxq%}c+oCXX-u2AZ>z!}s#ow?|Psl?UoRN98d3{syDC*!myS'
        '-i2!78~^|'
    )
    assert isinstance(_MODEL_, _pydsdl_.DelimitedType)
